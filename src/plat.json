[{"ATS":{"code":"0x","info":{"abiDefinition":[{"outputs":[{"name":"","type":"string"}],"constant":true,"payable":false,"inputs":[],"name":"name","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"liquidSupply","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"totalSupply","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"granularity","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"amount","type":"uint128"},{"name":"holderData","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorSend","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"operator","type":"address"}],"name":"authorizeOperator","type":"function"},{"outputs":[{"name":"","type":"string"}],"constant":true,"payable":false,"inputs":[],"name":"symbol","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"from","type":"address"},{"name":"amount","type":"uint128"},{"name":"holderData","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"operatorBurn","type":"function"},{"outputs":[{"name":"","type":"bool"}],"constant":true,"payable":false,"inputs":[{"name":"operator","type":"address"},{"name":"tokenHolder","type":"address"}],"name":"isOperatorFor","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"to","type":"address"},{"name":"amount","type":"uint128"},{"name":"holderData","type":"bytes"}],"name":"send","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"amount","type":"uint128"},{"name":"holderData","type":"bytes"}],"name":"burn","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"operator","type":"address"}],"name":"revokeOperator","type":"function"},{"outputs":[],"inputs":[{"indexed":true,"name":"_totalSupply","type":"uint128"},{"indexed":true,"name":"_specialAddress","type":"address"}],"name":"Created","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_operator","type":"address"},{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_amount","type":"uint128"},{"indexed":false,"name":"_holderData","type":"bytes"},{"indexed":false,"name":"_operatorData","type":"bytes"}],"name":"Sent","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_operator","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_amount","type":"uint128"},{"indexed":false,"name":"_operatorData","type":"bytes"}],"name":"Minted","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_operator","type":"address"},{"indexed":true,"name":"_from","type":"address"},{"indexed":false,"name":"_amount","type":"uint128"},{"indexed":false,"name":"_holderData","type":"bytes"},{"indexed":false,"name":"_operatorData","type":"bytes"}],"name":"Burned","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_operator","type":"address"},{"indexed":true,"name":"_tokenHolder","type":"address"}],"name":"AuthorizedOperator","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_operator","type":"address"},{"indexed":true,"name":"_tokenHolder","type":"address"}],"name":"RevokedOperator","anonymous":false,"type":"event"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.15;\n\n/*====================SafeMath begins====================*/\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @notice This is a softer (in terms of throws) variant of SafeMath:\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1121\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n        c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        // Solidity automatically throws when dividing by 0\n        // therefore require beforehand avoid throw\n        require(_b > 0);\n        // uint128 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n}\n\n/*====================SafeMath ends====================*/\n\n\n/*====================ATS begins====================*/\ninterface ATS {\n\n    /// Returns the name of the token\n    function name() public constant returns (string);\n\n    /// Returns the symbol of the token\n    function symbol() public constant returns (string);\n\n    /// Returns the totalSupply of the token, assuming a fixed number of\n    /// token circulation, this number should not change.\n    function totalSupply() public constant returns (uint128);\n\n    /// Returns the currently liquid supply of the token, assuming a fixed\n    /// number of (total) tokens are available, this number should never\n    /// exceed the totalSupply() of the token.\n    function liquidSupply() public constant returns (uint128);\n\n    function balanceOf(address owner) public constant returns (uint128);\n\n    function granularity() public constant returns (uint128);\n\n    /// Default Operators removed, rationale behind this is that default operators\n    /// Rationale behind this is that all operators should be (opt-in), this includes\n    // function defaultOperators() public constant returns (address[]);\n\n    function isOperatorFor(address operator, address tokenHolder) public constant returns (bool);\n    function authorizeOperator(address operator) public;\n    function revokeOperator(address operator) public;\n\n    function send(address to, uint128 amount, bytes holderData) public;\n    function operatorSend(address from, address to, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Some functionality should still include a burn (for example slashing ERC20 tokens from a validator)\n    function burn(uint128 amount, bytes holderData) public;\n\n    function operatorBurn(address from, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Event to be emit at the time of contract creation. Rationale behind the event is a few things:\n    ///\n    /// * It allows one to filter for new ATS tokens being created, in the interest of clarity\n    ///   this is a big help. We can simply filter for this event.\n    ///\n    /// * It indicates the `totalSupply` of the network. `totalSupply` is very important in\n    ///   our standard, therefore it makes sense to include it as an emission.\n    event Created(\n        uint128 indexed     _totalSupply,\n        /// This is a horrible name I know, up for debate\n        address indexed     _specialAddress);\n\n    event Sent(\n        address indexed     _operator,\n        address indexed     _from,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event Minted(\n        address indexed     _operator,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _operatorData);\n\n    event Burned(\n        address indexed     _operator,\n        address indexed     _from,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event AuthorizedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n\n    event RevokedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n}\n/*====================ATS ends====================*/\n\n\n/*====================ERC20 begins====================*/\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n *\n * @notice ATS contracts by default are required to implement ERC20 interface\n */\ncontract ERC20 {\n    function totalSupply() public constant returns (uint128);\n\n    function balanceOf(address _who) public constant returns (uint128);\n\n    function allowance(address _owner, address _spender) public constant returns (uint128);\n\n    function transfer(address _to, uint128 _value) public returns (bool);\n\n    function approve(address _spender, uint128 _value) public returns (bool);\n\n    function transferFrom(address _from, address _to, uint128 _value) public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint128 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint128 value\n    );\n}\n/*====================ERC20 ends====================*/\n\n/*====================ContractInterfaceImplementer begins====================*/\ncontract ContractInterfaceRegistry {\n    //function getManager(address _addr) public constant returns(address);\n    function setManager(address _addr, address _newManager) external;\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external constant returns (address);\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\n}\n\ncontract ContractInterfaceImplementer {\n    // TODO: this needs to be deployed, this is just a placeholder address\n    ContractInterfaceRegistry contractInterfaceRegistry = ContractInterfaceRegistry(0xa016a864c95dfd71bde76ade27a4045cd8e1b6e82cb91090fdedec3822e80511);\n\n    function setInterfaceImplementation(string _interfaceLabel, address impl) internal {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        contractInterfaceRegistry.setInterfaceImplementer(this, interfaceHash, impl);\n    }\n\n    function interfaceAddr(address addr, string _interfaceLabel) internal constant returns(address) {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        return contractInterfaceRegistry.getInterfaceImplementer(addr, interfaceHash);\n    }\n\n    function delegateManagement(address _newManager) internal {\n        contractInterfaceRegistry.setManager(this, _newManager);\n    }\n}\n/*====================ContractInterfaceImplementer ends====================*/\n\n\n\n/*====================ATSTokenRecipient begins====================*/\ncontract ATSTokenRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenRecipient ends====================*/\n\n\n\n/*====================ATSTokenSender begins====================*/\ncontract ATSTokenSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenSender ends====================*/\n\n\n\n/*====================TokenBridgeRegistryUserInterface begins====================*/\n/// @title TokenBridgeRegistryUserInterface\n/// Represents an entity that implements functionality designed to\n/// interface with token bridges.\ninterface TokenBridgeRegistryUserInterface {\n    /// @notice Interface for a bridge/relay to execute a `send`\n    /// @dev this name was suggested by Michael Kitchen, who suggested\n    /// it makes sense to thaw an token from solid to liquid\n    ///\n    /// @dev function is called by foreign entity to `thaw` tokens\n    /// to a particular user.\n    function thaw(bytes32 _foreignNetworkId, address _recipient, uint128 _amount, bytes _foreignData) public;\n\n    /// @notice Returns the relay address for the given implementer\n    function registry() public constant returns (address);\n\n    /// @notice Interface for a user to execute a `freeze`, which essentially\n    /// is a functionality that locks the token (into the special address)\n    ///\n    /// @dev function is called by local user to `freeze` tokens thereby\n    /// transferring them to another network.\n    function freeze(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n\n    /// @notice function for a token contract to set the registry\n    function setRegistry(address _registry) public;\n\n    /// @notice thaw event, to be called by the implementer after\n    /// receiving the thaw\n    event Thaw(\n        bytes32 indexed _foreignNetworkId,\n        address indexed _recipient,\n        uint128 indexed _amount,\n        bytes           _foreignData\n    );\n\n    /// @notice emit to indicate a `freeze` has been called by\n    /// the local user.\n    event Freeze(\n        bytes32 indexed _foreignNetworkId,\n        bytes32 indexed _foreignRecipient,\n        uint128 indexed _amount,\n        bytes           _localData\n    );\n\n    /// @notice emit to indicate that a registry has been set\n    event RegistrySet(\n        address indexed _registry\n    );\n}\n\n/// @title TokenBridge\n/// Used by both the registry and `TokenBridgeRegisterUserInterface`,\n/// informs the registry contract that a transfer is occuring.\ninterface TokenBridgeRegistryInterface {\n    /// @notice function used by the registry to emit a transfer event\n    function transfer(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n}\n/*====================TokenBridgeRegistryUserInterface ends====================*/\n\n\n\ncontract Platypus is ATS, ERC20, ContractInterfaceImplementer {\n    using SafeMath for uint128;\n\n    /* -- Constants -- */\n\n    address constant internal addressTypeMask = 0xFF00000000000000000000000000000000000000000000000000000000000000;\n    address constant internal zeroAddress = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    /* -- ATS Contract State -- */\n\n    string internal mName;\n    string internal mSymbol;\n    uint128 internal mGranularity;\n    uint128 internal mTotalSupply;\n    address internal mSpecialAddress;\n\n    mapping(address => uint128) internal mBalances;\n    mapping(address => mapping(address => bool)) internal mAuthorized;\n\n    // for ERC20\n    mapping(address => mapping(address => uint128)) internal mAllowed;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token.\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    /// @param _totalSupply of the new token. This can only be set once\n    function Platypus(\n        string _name,\n        string _symbol,\n        uint128 _granularity,\n        uint128 _totalSupply,\n        address _specialAddress\n    ) {\n        require(_granularity >= 1);\n        mName = 'platapus';\n        mSymbol = 'pla';\n        mTotalSupply = 10000;\n        mGranularity = _granularity;\n        mSpecialAddress = _specialAddress;\n\n        // initialize special address account\n        initializeSpecialAddress();\n\n        // register onto CIR\n        setInterfaceImplementation(\"ATS\", this);\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public constant returns (string) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public constant returns (string) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public constant returns (uint128) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public constant returns (uint128) { return mTotalSupply; }\n\n    /// @return the special address of the token\n    function specialAddress() public constant returns (address) { return mSpecialAddress; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public constant returns (uint128) { return mBalances[_tokenHolder]; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint128 _amount, bytes _userData) public {\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = true;\n        AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = false;\n        RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public constant returns (bool) {\n        return (_operator == _tokenHolder || mAuthorized[_operator][_tokenHolder]);\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(address _from, address _to, uint128 _amount, bytes _userData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _from));\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\n    }\n\n    function burn(uint128 _amount, bytes _holderData) public {\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\n    }\n\n    function operatorBurn(address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _tokenHolder));\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n\n    /// @notice Helper function that initializes the `specialAddress`\n    /// checks that the specialAddress is indeed not in the user space\n    /// and is in a pre-destined reserved space only available for\n    /// `non-user` addresses.\n    ///\n    /// @dev we don't apply checks for `totalSupply` here because\n    /// the user could want to set a supply of `0` tokens.\n    function initializeSpecialAddress() internal {\n        /// check that the used address is not in user space\n        //I'm getting an error here, will check later\n        //require(mSpecialAddress & addressTypeMask == zeroAddress);\n        mBalances[mSpecialAddress] = mTotalSupply;\n        Created(mTotalSupply, mSpecialAddress);\n    }\n\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint128 _amount) internal constant {\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    ///\n    /// Ideally, we should propose a better system that extcodesize\n    /// TODO: CHANGE ME, going to require a resolution on best approach\n    /// Given that we won't be able to detect code size.\n    ///\n    /// @param _addr The address to be checked\n    /// @return `true` if the contract is a regular address, `false` otherwise\n    function isRegularAddress(address _addr) internal constant returns (bool) {\n        // if (_addr == 0) { return false; }\n        // uint size;\n        // assembly { size := extcodesize(_addr) }\n        // return size == 0;\n        return true;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `erc777_tokenHolder`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\n\n        require(_to != address(0));             // forbid sending to 0x0 (=burning)\n        require(_to != mSpecialAddress);         // forbid sending to special address (=locking)\n        require(mBalances[_from] >= _amount);   // ensure enough funds\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\n\n        Sent(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _holderData Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(address _operator, address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData)\n        internal\n    {\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount);\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\n        Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ATSTokenRecipient\");\n        if (recipientImplementation != 0) {\n            ATSTokenRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _userData, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to));\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ATSTokenSender\");\n        if (senderImplementation == 0) { return; }\n        ATSTokenSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    function liquidSupply() public constant returns (uint128) {\n        return mTotalSupply.sub(balanceOf(mSpecialAddress));\n    }\n\n    /* -- ERC20 Functionality -- */\n\n    function decimals() public constant returns (uint8) {\n        return uint8(18);\n    }\n\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint128 _amount) public returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint128 _amount) public returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender]);\n\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint128 _amount) public returns (bool success) {\n        mAllowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint128 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n}\n"}},"TokenBridgeRegistryInterface":{"code":"0x","info":{"abiDefinition":[{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"_foreignNetworkId","type":"bytes32"},{"name":"_foreignRecipient","type":"bytes32"},{"name":"_amount","type":"uint128"},{"name":"_localData","type":"bytes"}],"name":"transfer","type":"function"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.15;\n\n/*====================SafeMath begins====================*/\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @notice This is a softer (in terms of throws) variant of SafeMath:\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1121\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n        c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        // Solidity automatically throws when dividing by 0\n        // therefore require beforehand avoid throw\n        require(_b > 0);\n        // uint128 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n}\n\n/*====================SafeMath ends====================*/\n\n\n/*====================ATS begins====================*/\ninterface ATS {\n\n    /// Returns the name of the token\n    function name() public constant returns (string);\n\n    /// Returns the symbol of the token\n    function symbol() public constant returns (string);\n\n    /// Returns the totalSupply of the token, assuming a fixed number of\n    /// token circulation, this number should not change.\n    function totalSupply() public constant returns (uint128);\n\n    /// Returns the currently liquid supply of the token, assuming a fixed\n    /// number of (total) tokens are available, this number should never\n    /// exceed the totalSupply() of the token.\n    function liquidSupply() public constant returns (uint128);\n\n    function balanceOf(address owner) public constant returns (uint128);\n\n    function granularity() public constant returns (uint128);\n\n    /// Default Operators removed, rationale behind this is that default operators\n    /// Rationale behind this is that all operators should be (opt-in), this includes\n    // function defaultOperators() public constant returns (address[]);\n\n    function isOperatorFor(address operator, address tokenHolder) public constant returns (bool);\n    function authorizeOperator(address operator) public;\n    function revokeOperator(address operator) public;\n\n    function send(address to, uint128 amount, bytes holderData) public;\n    function operatorSend(address from, address to, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Some functionality should still include a burn (for example slashing ERC20 tokens from a validator)\n    function burn(uint128 amount, bytes holderData) public;\n\n    function operatorBurn(address from, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Event to be emit at the time of contract creation. Rationale behind the event is a few things:\n    ///\n    /// * It allows one to filter for new ATS tokens being created, in the interest of clarity\n    ///   this is a big help. We can simply filter for this event.\n    ///\n    /// * It indicates the `totalSupply` of the network. `totalSupply` is very important in\n    ///   our standard, therefore it makes sense to include it as an emission.\n    event Created(\n        uint128 indexed     _totalSupply,\n        /// This is a horrible name I know, up for debate\n        address indexed     _specialAddress);\n\n    event Sent(\n        address indexed     _operator,\n        address indexed     _from,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event Minted(\n        address indexed     _operator,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _operatorData);\n\n    event Burned(\n        address indexed     _operator,\n        address indexed     _from,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event AuthorizedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n\n    event RevokedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n}\n/*====================ATS ends====================*/\n\n\n/*====================ERC20 begins====================*/\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n *\n * @notice ATS contracts by default are required to implement ERC20 interface\n */\ncontract ERC20 {\n    function totalSupply() public constant returns (uint128);\n\n    function balanceOf(address _who) public constant returns (uint128);\n\n    function allowance(address _owner, address _spender) public constant returns (uint128);\n\n    function transfer(address _to, uint128 _value) public returns (bool);\n\n    function approve(address _spender, uint128 _value) public returns (bool);\n\n    function transferFrom(address _from, address _to, uint128 _value) public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint128 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint128 value\n    );\n}\n/*====================ERC20 ends====================*/\n\n/*====================ContractInterfaceImplementer begins====================*/\ncontract ContractInterfaceRegistry {\n    //function getManager(address _addr) public constant returns(address);\n    function setManager(address _addr, address _newManager) external;\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external constant returns (address);\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\n}\n\ncontract ContractInterfaceImplementer {\n    // TODO: this needs to be deployed, this is just a placeholder address\n    ContractInterfaceRegistry contractInterfaceRegistry = ContractInterfaceRegistry(0xa016a864c95dfd71bde76ade27a4045cd8e1b6e82cb91090fdedec3822e80511);\n\n    function setInterfaceImplementation(string _interfaceLabel, address impl) internal {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        contractInterfaceRegistry.setInterfaceImplementer(this, interfaceHash, impl);\n    }\n\n    function interfaceAddr(address addr, string _interfaceLabel) internal constant returns(address) {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        return contractInterfaceRegistry.getInterfaceImplementer(addr, interfaceHash);\n    }\n\n    function delegateManagement(address _newManager) internal {\n        contractInterfaceRegistry.setManager(this, _newManager);\n    }\n}\n/*====================ContractInterfaceImplementer ends====================*/\n\n\n\n/*====================ATSTokenRecipient begins====================*/\ncontract ATSTokenRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenRecipient ends====================*/\n\n\n\n/*====================ATSTokenSender begins====================*/\ncontract ATSTokenSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenSender ends====================*/\n\n\n\n/*====================TokenBridgeRegistryUserInterface begins====================*/\n/// @title TokenBridgeRegistryUserInterface\n/// Represents an entity that implements functionality designed to\n/// interface with token bridges.\ninterface TokenBridgeRegistryUserInterface {\n    /// @notice Interface for a bridge/relay to execute a `send`\n    /// @dev this name was suggested by Michael Kitchen, who suggested\n    /// it makes sense to thaw an token from solid to liquid\n    ///\n    /// @dev function is called by foreign entity to `thaw` tokens\n    /// to a particular user.\n    function thaw(bytes32 _foreignNetworkId, address _recipient, uint128 _amount, bytes _foreignData) public;\n\n    /// @notice Returns the relay address for the given implementer\n    function registry() public constant returns (address);\n\n    /// @notice Interface for a user to execute a `freeze`, which essentially\n    /// is a functionality that locks the token (into the special address)\n    ///\n    /// @dev function is called by local user to `freeze` tokens thereby\n    /// transferring them to another network.\n    function freeze(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n\n    /// @notice function for a token contract to set the registry\n    function setRegistry(address _registry) public;\n\n    /// @notice thaw event, to be called by the implementer after\n    /// receiving the thaw\n    event Thaw(\n        bytes32 indexed _foreignNetworkId,\n        address indexed _recipient,\n        uint128 indexed _amount,\n        bytes           _foreignData\n    );\n\n    /// @notice emit to indicate a `freeze` has been called by\n    /// the local user.\n    event Freeze(\n        bytes32 indexed _foreignNetworkId,\n        bytes32 indexed _foreignRecipient,\n        uint128 indexed _amount,\n        bytes           _localData\n    );\n\n    /// @notice emit to indicate that a registry has been set\n    event RegistrySet(\n        address indexed _registry\n    );\n}\n\n/// @title TokenBridge\n/// Used by both the registry and `TokenBridgeRegisterUserInterface`,\n/// informs the registry contract that a transfer is occuring.\ninterface TokenBridgeRegistryInterface {\n    /// @notice function used by the registry to emit a transfer event\n    function transfer(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n}\n/*====================TokenBridgeRegistryUserInterface ends====================*/\n\n\n\ncontract Platypus is ATS, ERC20, ContractInterfaceImplementer {\n    using SafeMath for uint128;\n\n    /* -- Constants -- */\n\n    address constant internal addressTypeMask = 0xFF00000000000000000000000000000000000000000000000000000000000000;\n    address constant internal zeroAddress = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    /* -- ATS Contract State -- */\n\n    string internal mName;\n    string internal mSymbol;\n    uint128 internal mGranularity;\n    uint128 internal mTotalSupply;\n    address internal mSpecialAddress;\n\n    mapping(address => uint128) internal mBalances;\n    mapping(address => mapping(address => bool)) internal mAuthorized;\n\n    // for ERC20\n    mapping(address => mapping(address => uint128)) internal mAllowed;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token.\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    /// @param _totalSupply of the new token. This can only be set once\n    function Platypus(\n        string _name,\n        string _symbol,\n        uint128 _granularity,\n        uint128 _totalSupply,\n        address _specialAddress\n    ) {\n        require(_granularity >= 1);\n        mName = 'platapus';\n        mSymbol = 'pla';\n        mTotalSupply = 10000;\n        mGranularity = _granularity;\n        mSpecialAddress = _specialAddress;\n\n        // initialize special address account\n        initializeSpecialAddress();\n\n        // register onto CIR\n        setInterfaceImplementation(\"ATS\", this);\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public constant returns (string) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public constant returns (string) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public constant returns (uint128) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public constant returns (uint128) { return mTotalSupply; }\n\n    /// @return the special address of the token\n    function specialAddress() public constant returns (address) { return mSpecialAddress; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public constant returns (uint128) { return mBalances[_tokenHolder]; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint128 _amount, bytes _userData) public {\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = true;\n        AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = false;\n        RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public constant returns (bool) {\n        return (_operator == _tokenHolder || mAuthorized[_operator][_tokenHolder]);\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(address _from, address _to, uint128 _amount, bytes _userData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _from));\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\n    }\n\n    function burn(uint128 _amount, bytes _holderData) public {\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\n    }\n\n    function operatorBurn(address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _tokenHolder));\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n\n    /// @notice Helper function that initializes the `specialAddress`\n    /// checks that the specialAddress is indeed not in the user space\n    /// and is in a pre-destined reserved space only available for\n    /// `non-user` addresses.\n    ///\n    /// @dev we don't apply checks for `totalSupply` here because\n    /// the user could want to set a supply of `0` tokens.\n    function initializeSpecialAddress() internal {\n        /// check that the used address is not in user space\n        //I'm getting an error here, will check later\n        //require(mSpecialAddress & addressTypeMask == zeroAddress);\n        mBalances[mSpecialAddress] = mTotalSupply;\n        Created(mTotalSupply, mSpecialAddress);\n    }\n\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint128 _amount) internal constant {\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    ///\n    /// Ideally, we should propose a better system that extcodesize\n    /// TODO: CHANGE ME, going to require a resolution on best approach\n    /// Given that we won't be able to detect code size.\n    ///\n    /// @param _addr The address to be checked\n    /// @return `true` if the contract is a regular address, `false` otherwise\n    function isRegularAddress(address _addr) internal constant returns (bool) {\n        // if (_addr == 0) { return false; }\n        // uint size;\n        // assembly { size := extcodesize(_addr) }\n        // return size == 0;\n        return true;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `erc777_tokenHolder`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\n\n        require(_to != address(0));             // forbid sending to 0x0 (=burning)\n        require(_to != mSpecialAddress);         // forbid sending to special address (=locking)\n        require(mBalances[_from] >= _amount);   // ensure enough funds\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\n\n        Sent(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _holderData Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(address _operator, address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData)\n        internal\n    {\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount);\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\n        Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ATSTokenRecipient\");\n        if (recipientImplementation != 0) {\n            ATSTokenRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _userData, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to));\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ATSTokenSender\");\n        if (senderImplementation == 0) { return; }\n        ATSTokenSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    function liquidSupply() public constant returns (uint128) {\n        return mTotalSupply.sub(balanceOf(mSpecialAddress));\n    }\n\n    /* -- ERC20 Functionality -- */\n\n    function decimals() public constant returns (uint8) {\n        return uint8(18);\n    }\n\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint128 _amount) public returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint128 _amount) public returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender]);\n\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint128 _amount) public returns (bool success) {\n        mAllowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint128 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n}\n"}},"ContractInterfaceRegistry":{"code":"0x","info":{"abiDefinition":[{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_interfaceHash","type":"bytes32"},{"name":"_implementer","type":"address"}],"name":"setInterfaceImplementer","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_newManager","type":"address"}],"name":"setManager","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[{"name":"_addr","type":"address"},{"name":"_interfaceHash","type":"bytes32"}],"name":"getInterfaceImplementer","type":"function"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.15;\n\n/*====================SafeMath begins====================*/\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @notice This is a softer (in terms of throws) variant of SafeMath:\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1121\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n        c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        // Solidity automatically throws when dividing by 0\n        // therefore require beforehand avoid throw\n        require(_b > 0);\n        // uint128 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n}\n\n/*====================SafeMath ends====================*/\n\n\n/*====================ATS begins====================*/\ninterface ATS {\n\n    /// Returns the name of the token\n    function name() public constant returns (string);\n\n    /// Returns the symbol of the token\n    function symbol() public constant returns (string);\n\n    /// Returns the totalSupply of the token, assuming a fixed number of\n    /// token circulation, this number should not change.\n    function totalSupply() public constant returns (uint128);\n\n    /// Returns the currently liquid supply of the token, assuming a fixed\n    /// number of (total) tokens are available, this number should never\n    /// exceed the totalSupply() of the token.\n    function liquidSupply() public constant returns (uint128);\n\n    function balanceOf(address owner) public constant returns (uint128);\n\n    function granularity() public constant returns (uint128);\n\n    /// Default Operators removed, rationale behind this is that default operators\n    /// Rationale behind this is that all operators should be (opt-in), this includes\n    // function defaultOperators() public constant returns (address[]);\n\n    function isOperatorFor(address operator, address tokenHolder) public constant returns (bool);\n    function authorizeOperator(address operator) public;\n    function revokeOperator(address operator) public;\n\n    function send(address to, uint128 amount, bytes holderData) public;\n    function operatorSend(address from, address to, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Some functionality should still include a burn (for example slashing ERC20 tokens from a validator)\n    function burn(uint128 amount, bytes holderData) public;\n\n    function operatorBurn(address from, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Event to be emit at the time of contract creation. Rationale behind the event is a few things:\n    ///\n    /// * It allows one to filter for new ATS tokens being created, in the interest of clarity\n    ///   this is a big help. We can simply filter for this event.\n    ///\n    /// * It indicates the `totalSupply` of the network. `totalSupply` is very important in\n    ///   our standard, therefore it makes sense to include it as an emission.\n    event Created(\n        uint128 indexed     _totalSupply,\n        /// This is a horrible name I know, up for debate\n        address indexed     _specialAddress);\n\n    event Sent(\n        address indexed     _operator,\n        address indexed     _from,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event Minted(\n        address indexed     _operator,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _operatorData);\n\n    event Burned(\n        address indexed     _operator,\n        address indexed     _from,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event AuthorizedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n\n    event RevokedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n}\n/*====================ATS ends====================*/\n\n\n/*====================ERC20 begins====================*/\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n *\n * @notice ATS contracts by default are required to implement ERC20 interface\n */\ncontract ERC20 {\n    function totalSupply() public constant returns (uint128);\n\n    function balanceOf(address _who) public constant returns (uint128);\n\n    function allowance(address _owner, address _spender) public constant returns (uint128);\n\n    function transfer(address _to, uint128 _value) public returns (bool);\n\n    function approve(address _spender, uint128 _value) public returns (bool);\n\n    function transferFrom(address _from, address _to, uint128 _value) public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint128 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint128 value\n    );\n}\n/*====================ERC20 ends====================*/\n\n/*====================ContractInterfaceImplementer begins====================*/\ncontract ContractInterfaceRegistry {\n    //function getManager(address _addr) public constant returns(address);\n    function setManager(address _addr, address _newManager) external;\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external constant returns (address);\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\n}\n\ncontract ContractInterfaceImplementer {\n    // TODO: this needs to be deployed, this is just a placeholder address\n    ContractInterfaceRegistry contractInterfaceRegistry = ContractInterfaceRegistry(0xa016a864c95dfd71bde76ade27a4045cd8e1b6e82cb91090fdedec3822e80511);\n\n    function setInterfaceImplementation(string _interfaceLabel, address impl) internal {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        contractInterfaceRegistry.setInterfaceImplementer(this, interfaceHash, impl);\n    }\n\n    function interfaceAddr(address addr, string _interfaceLabel) internal constant returns(address) {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        return contractInterfaceRegistry.getInterfaceImplementer(addr, interfaceHash);\n    }\n\n    function delegateManagement(address _newManager) internal {\n        contractInterfaceRegistry.setManager(this, _newManager);\n    }\n}\n/*====================ContractInterfaceImplementer ends====================*/\n\n\n\n/*====================ATSTokenRecipient begins====================*/\ncontract ATSTokenRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenRecipient ends====================*/\n\n\n\n/*====================ATSTokenSender begins====================*/\ncontract ATSTokenSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenSender ends====================*/\n\n\n\n/*====================TokenBridgeRegistryUserInterface begins====================*/\n/// @title TokenBridgeRegistryUserInterface\n/// Represents an entity that implements functionality designed to\n/// interface with token bridges.\ninterface TokenBridgeRegistryUserInterface {\n    /// @notice Interface for a bridge/relay to execute a `send`\n    /// @dev this name was suggested by Michael Kitchen, who suggested\n    /// it makes sense to thaw an token from solid to liquid\n    ///\n    /// @dev function is called by foreign entity to `thaw` tokens\n    /// to a particular user.\n    function thaw(bytes32 _foreignNetworkId, address _recipient, uint128 _amount, bytes _foreignData) public;\n\n    /// @notice Returns the relay address for the given implementer\n    function registry() public constant returns (address);\n\n    /// @notice Interface for a user to execute a `freeze`, which essentially\n    /// is a functionality that locks the token (into the special address)\n    ///\n    /// @dev function is called by local user to `freeze` tokens thereby\n    /// transferring them to another network.\n    function freeze(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n\n    /// @notice function for a token contract to set the registry\n    function setRegistry(address _registry) public;\n\n    /// @notice thaw event, to be called by the implementer after\n    /// receiving the thaw\n    event Thaw(\n        bytes32 indexed _foreignNetworkId,\n        address indexed _recipient,\n        uint128 indexed _amount,\n        bytes           _foreignData\n    );\n\n    /// @notice emit to indicate a `freeze` has been called by\n    /// the local user.\n    event Freeze(\n        bytes32 indexed _foreignNetworkId,\n        bytes32 indexed _foreignRecipient,\n        uint128 indexed _amount,\n        bytes           _localData\n    );\n\n    /// @notice emit to indicate that a registry has been set\n    event RegistrySet(\n        address indexed _registry\n    );\n}\n\n/// @title TokenBridge\n/// Used by both the registry and `TokenBridgeRegisterUserInterface`,\n/// informs the registry contract that a transfer is occuring.\ninterface TokenBridgeRegistryInterface {\n    /// @notice function used by the registry to emit a transfer event\n    function transfer(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n}\n/*====================TokenBridgeRegistryUserInterface ends====================*/\n\n\n\ncontract Platypus is ATS, ERC20, ContractInterfaceImplementer {\n    using SafeMath for uint128;\n\n    /* -- Constants -- */\n\n    address constant internal addressTypeMask = 0xFF00000000000000000000000000000000000000000000000000000000000000;\n    address constant internal zeroAddress = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    /* -- ATS Contract State -- */\n\n    string internal mName;\n    string internal mSymbol;\n    uint128 internal mGranularity;\n    uint128 internal mTotalSupply;\n    address internal mSpecialAddress;\n\n    mapping(address => uint128) internal mBalances;\n    mapping(address => mapping(address => bool)) internal mAuthorized;\n\n    // for ERC20\n    mapping(address => mapping(address => uint128)) internal mAllowed;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token.\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    /// @param _totalSupply of the new token. This can only be set once\n    function Platypus(\n        string _name,\n        string _symbol,\n        uint128 _granularity,\n        uint128 _totalSupply,\n        address _specialAddress\n    ) {\n        require(_granularity >= 1);\n        mName = 'platapus';\n        mSymbol = 'pla';\n        mTotalSupply = 10000;\n        mGranularity = _granularity;\n        mSpecialAddress = _specialAddress;\n\n        // initialize special address account\n        initializeSpecialAddress();\n\n        // register onto CIR\n        setInterfaceImplementation(\"ATS\", this);\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public constant returns (string) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public constant returns (string) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public constant returns (uint128) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public constant returns (uint128) { return mTotalSupply; }\n\n    /// @return the special address of the token\n    function specialAddress() public constant returns (address) { return mSpecialAddress; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public constant returns (uint128) { return mBalances[_tokenHolder]; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint128 _amount, bytes _userData) public {\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = true;\n        AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = false;\n        RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public constant returns (bool) {\n        return (_operator == _tokenHolder || mAuthorized[_operator][_tokenHolder]);\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(address _from, address _to, uint128 _amount, bytes _userData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _from));\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\n    }\n\n    function burn(uint128 _amount, bytes _holderData) public {\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\n    }\n\n    function operatorBurn(address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _tokenHolder));\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n\n    /// @notice Helper function that initializes the `specialAddress`\n    /// checks that the specialAddress is indeed not in the user space\n    /// and is in a pre-destined reserved space only available for\n    /// `non-user` addresses.\n    ///\n    /// @dev we don't apply checks for `totalSupply` here because\n    /// the user could want to set a supply of `0` tokens.\n    function initializeSpecialAddress() internal {\n        /// check that the used address is not in user space\n        //I'm getting an error here, will check later\n        //require(mSpecialAddress & addressTypeMask == zeroAddress);\n        mBalances[mSpecialAddress] = mTotalSupply;\n        Created(mTotalSupply, mSpecialAddress);\n    }\n\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint128 _amount) internal constant {\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    ///\n    /// Ideally, we should propose a better system that extcodesize\n    /// TODO: CHANGE ME, going to require a resolution on best approach\n    /// Given that we won't be able to detect code size.\n    ///\n    /// @param _addr The address to be checked\n    /// @return `true` if the contract is a regular address, `false` otherwise\n    function isRegularAddress(address _addr) internal constant returns (bool) {\n        // if (_addr == 0) { return false; }\n        // uint size;\n        // assembly { size := extcodesize(_addr) }\n        // return size == 0;\n        return true;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `erc777_tokenHolder`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\n\n        require(_to != address(0));             // forbid sending to 0x0 (=burning)\n        require(_to != mSpecialAddress);         // forbid sending to special address (=locking)\n        require(mBalances[_from] >= _amount);   // ensure enough funds\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\n\n        Sent(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _holderData Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(address _operator, address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData)\n        internal\n    {\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount);\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\n        Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ATSTokenRecipient\");\n        if (recipientImplementation != 0) {\n            ATSTokenRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _userData, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to));\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ATSTokenSender\");\n        if (senderImplementation == 0) { return; }\n        ATSTokenSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    function liquidSupply() public constant returns (uint128) {\n        return mTotalSupply.sub(balanceOf(mSpecialAddress));\n    }\n\n    /* -- ERC20 Functionality -- */\n\n    function decimals() public constant returns (uint8) {\n        return uint8(18);\n    }\n\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint128 _amount) public returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint128 _amount) public returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender]);\n\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint128 _amount) public returns (bool success) {\n        mAllowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint128 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n}\n"}},"ATSTokenSender":{"code":"0x","info":{"abiDefinition":[{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"operator","type":"address"},{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"amount","type":"uint128"},{"name":"userData","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"tokensToSend","type":"function"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.15;\n\n/*====================SafeMath begins====================*/\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @notice This is a softer (in terms of throws) variant of SafeMath:\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1121\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n        c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        // Solidity automatically throws when dividing by 0\n        // therefore require beforehand avoid throw\n        require(_b > 0);\n        // uint128 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n}\n\n/*====================SafeMath ends====================*/\n\n\n/*====================ATS begins====================*/\ninterface ATS {\n\n    /// Returns the name of the token\n    function name() public constant returns (string);\n\n    /// Returns the symbol of the token\n    function symbol() public constant returns (string);\n\n    /// Returns the totalSupply of the token, assuming a fixed number of\n    /// token circulation, this number should not change.\n    function totalSupply() public constant returns (uint128);\n\n    /// Returns the currently liquid supply of the token, assuming a fixed\n    /// number of (total) tokens are available, this number should never\n    /// exceed the totalSupply() of the token.\n    function liquidSupply() public constant returns (uint128);\n\n    function balanceOf(address owner) public constant returns (uint128);\n\n    function granularity() public constant returns (uint128);\n\n    /// Default Operators removed, rationale behind this is that default operators\n    /// Rationale behind this is that all operators should be (opt-in), this includes\n    // function defaultOperators() public constant returns (address[]);\n\n    function isOperatorFor(address operator, address tokenHolder) public constant returns (bool);\n    function authorizeOperator(address operator) public;\n    function revokeOperator(address operator) public;\n\n    function send(address to, uint128 amount, bytes holderData) public;\n    function operatorSend(address from, address to, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Some functionality should still include a burn (for example slashing ERC20 tokens from a validator)\n    function burn(uint128 amount, bytes holderData) public;\n\n    function operatorBurn(address from, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Event to be emit at the time of contract creation. Rationale behind the event is a few things:\n    ///\n    /// * It allows one to filter for new ATS tokens being created, in the interest of clarity\n    ///   this is a big help. We can simply filter for this event.\n    ///\n    /// * It indicates the `totalSupply` of the network. `totalSupply` is very important in\n    ///   our standard, therefore it makes sense to include it as an emission.\n    event Created(\n        uint128 indexed     _totalSupply,\n        /// This is a horrible name I know, up for debate\n        address indexed     _specialAddress);\n\n    event Sent(\n        address indexed     _operator,\n        address indexed     _from,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event Minted(\n        address indexed     _operator,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _operatorData);\n\n    event Burned(\n        address indexed     _operator,\n        address indexed     _from,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event AuthorizedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n\n    event RevokedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n}\n/*====================ATS ends====================*/\n\n\n/*====================ERC20 begins====================*/\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n *\n * @notice ATS contracts by default are required to implement ERC20 interface\n */\ncontract ERC20 {\n    function totalSupply() public constant returns (uint128);\n\n    function balanceOf(address _who) public constant returns (uint128);\n\n    function allowance(address _owner, address _spender) public constant returns (uint128);\n\n    function transfer(address _to, uint128 _value) public returns (bool);\n\n    function approve(address _spender, uint128 _value) public returns (bool);\n\n    function transferFrom(address _from, address _to, uint128 _value) public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint128 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint128 value\n    );\n}\n/*====================ERC20 ends====================*/\n\n/*====================ContractInterfaceImplementer begins====================*/\ncontract ContractInterfaceRegistry {\n    //function getManager(address _addr) public constant returns(address);\n    function setManager(address _addr, address _newManager) external;\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external constant returns (address);\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\n}\n\ncontract ContractInterfaceImplementer {\n    // TODO: this needs to be deployed, this is just a placeholder address\n    ContractInterfaceRegistry contractInterfaceRegistry = ContractInterfaceRegistry(0xa016a864c95dfd71bde76ade27a4045cd8e1b6e82cb91090fdedec3822e80511);\n\n    function setInterfaceImplementation(string _interfaceLabel, address impl) internal {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        contractInterfaceRegistry.setInterfaceImplementer(this, interfaceHash, impl);\n    }\n\n    function interfaceAddr(address addr, string _interfaceLabel) internal constant returns(address) {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        return contractInterfaceRegistry.getInterfaceImplementer(addr, interfaceHash);\n    }\n\n    function delegateManagement(address _newManager) internal {\n        contractInterfaceRegistry.setManager(this, _newManager);\n    }\n}\n/*====================ContractInterfaceImplementer ends====================*/\n\n\n\n/*====================ATSTokenRecipient begins====================*/\ncontract ATSTokenRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenRecipient ends====================*/\n\n\n\n/*====================ATSTokenSender begins====================*/\ncontract ATSTokenSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenSender ends====================*/\n\n\n\n/*====================TokenBridgeRegistryUserInterface begins====================*/\n/// @title TokenBridgeRegistryUserInterface\n/// Represents an entity that implements functionality designed to\n/// interface with token bridges.\ninterface TokenBridgeRegistryUserInterface {\n    /// @notice Interface for a bridge/relay to execute a `send`\n    /// @dev this name was suggested by Michael Kitchen, who suggested\n    /// it makes sense to thaw an token from solid to liquid\n    ///\n    /// @dev function is called by foreign entity to `thaw` tokens\n    /// to a particular user.\n    function thaw(bytes32 _foreignNetworkId, address _recipient, uint128 _amount, bytes _foreignData) public;\n\n    /// @notice Returns the relay address for the given implementer\n    function registry() public constant returns (address);\n\n    /// @notice Interface for a user to execute a `freeze`, which essentially\n    /// is a functionality that locks the token (into the special address)\n    ///\n    /// @dev function is called by local user to `freeze` tokens thereby\n    /// transferring them to another network.\n    function freeze(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n\n    /// @notice function for a token contract to set the registry\n    function setRegistry(address _registry) public;\n\n    /// @notice thaw event, to be called by the implementer after\n    /// receiving the thaw\n    event Thaw(\n        bytes32 indexed _foreignNetworkId,\n        address indexed _recipient,\n        uint128 indexed _amount,\n        bytes           _foreignData\n    );\n\n    /// @notice emit to indicate a `freeze` has been called by\n    /// the local user.\n    event Freeze(\n        bytes32 indexed _foreignNetworkId,\n        bytes32 indexed _foreignRecipient,\n        uint128 indexed _amount,\n        bytes           _localData\n    );\n\n    /// @notice emit to indicate that a registry has been set\n    event RegistrySet(\n        address indexed _registry\n    );\n}\n\n/// @title TokenBridge\n/// Used by both the registry and `TokenBridgeRegisterUserInterface`,\n/// informs the registry contract that a transfer is occuring.\ninterface TokenBridgeRegistryInterface {\n    /// @notice function used by the registry to emit a transfer event\n    function transfer(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n}\n/*====================TokenBridgeRegistryUserInterface ends====================*/\n\n\n\ncontract Platypus is ATS, ERC20, ContractInterfaceImplementer {\n    using SafeMath for uint128;\n\n    /* -- Constants -- */\n\n    address constant internal addressTypeMask = 0xFF00000000000000000000000000000000000000000000000000000000000000;\n    address constant internal zeroAddress = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    /* -- ATS Contract State -- */\n\n    string internal mName;\n    string internal mSymbol;\n    uint128 internal mGranularity;\n    uint128 internal mTotalSupply;\n    address internal mSpecialAddress;\n\n    mapping(address => uint128) internal mBalances;\n    mapping(address => mapping(address => bool)) internal mAuthorized;\n\n    // for ERC20\n    mapping(address => mapping(address => uint128)) internal mAllowed;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token.\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    /// @param _totalSupply of the new token. This can only be set once\n    function Platypus(\n        string _name,\n        string _symbol,\n        uint128 _granularity,\n        uint128 _totalSupply,\n        address _specialAddress\n    ) {\n        require(_granularity >= 1);\n        mName = 'platapus';\n        mSymbol = 'pla';\n        mTotalSupply = 10000;\n        mGranularity = _granularity;\n        mSpecialAddress = _specialAddress;\n\n        // initialize special address account\n        initializeSpecialAddress();\n\n        // register onto CIR\n        setInterfaceImplementation(\"ATS\", this);\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public constant returns (string) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public constant returns (string) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public constant returns (uint128) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public constant returns (uint128) { return mTotalSupply; }\n\n    /// @return the special address of the token\n    function specialAddress() public constant returns (address) { return mSpecialAddress; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public constant returns (uint128) { return mBalances[_tokenHolder]; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint128 _amount, bytes _userData) public {\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = true;\n        AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = false;\n        RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public constant returns (bool) {\n        return (_operator == _tokenHolder || mAuthorized[_operator][_tokenHolder]);\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(address _from, address _to, uint128 _amount, bytes _userData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _from));\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\n    }\n\n    function burn(uint128 _amount, bytes _holderData) public {\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\n    }\n\n    function operatorBurn(address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _tokenHolder));\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n\n    /// @notice Helper function that initializes the `specialAddress`\n    /// checks that the specialAddress is indeed not in the user space\n    /// and is in a pre-destined reserved space only available for\n    /// `non-user` addresses.\n    ///\n    /// @dev we don't apply checks for `totalSupply` here because\n    /// the user could want to set a supply of `0` tokens.\n    function initializeSpecialAddress() internal {\n        /// check that the used address is not in user space\n        //I'm getting an error here, will check later\n        //require(mSpecialAddress & addressTypeMask == zeroAddress);\n        mBalances[mSpecialAddress] = mTotalSupply;\n        Created(mTotalSupply, mSpecialAddress);\n    }\n\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint128 _amount) internal constant {\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    ///\n    /// Ideally, we should propose a better system that extcodesize\n    /// TODO: CHANGE ME, going to require a resolution on best approach\n    /// Given that we won't be able to detect code size.\n    ///\n    /// @param _addr The address to be checked\n    /// @return `true` if the contract is a regular address, `false` otherwise\n    function isRegularAddress(address _addr) internal constant returns (bool) {\n        // if (_addr == 0) { return false; }\n        // uint size;\n        // assembly { size := extcodesize(_addr) }\n        // return size == 0;\n        return true;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `erc777_tokenHolder`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\n\n        require(_to != address(0));             // forbid sending to 0x0 (=burning)\n        require(_to != mSpecialAddress);         // forbid sending to special address (=locking)\n        require(mBalances[_from] >= _amount);   // ensure enough funds\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\n\n        Sent(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _holderData Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(address _operator, address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData)\n        internal\n    {\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount);\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\n        Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ATSTokenRecipient\");\n        if (recipientImplementation != 0) {\n            ATSTokenRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _userData, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to));\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ATSTokenSender\");\n        if (senderImplementation == 0) { return; }\n        ATSTokenSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    function liquidSupply() public constant returns (uint128) {\n        return mTotalSupply.sub(balanceOf(mSpecialAddress));\n    }\n\n    /* -- ERC20 Functionality -- */\n\n    function decimals() public constant returns (uint8) {\n        return uint8(18);\n    }\n\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint128 _amount) public returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint128 _amount) public returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender]);\n\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint128 _amount) public returns (bool success) {\n        mAllowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint128 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n}\n"}},"Platypus":{"code":"","info":{"abiDefinition":[{"outputs":[{"name":"","type":"string"}],"constant":true,"payable":false,"inputs":[],"name":"name","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"liquidSupply","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"totalSupply","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[],"name":"specialAddress","type":"function"},{"outputs":[{"name":"","type":"uint8"}],"constant":true,"payable":false,"inputs":[],"name":"decimals","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"granularity","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint128"},{"name":"_userData","type":"bytes"},{"name":"_operatorData","type":"bytes"}],"name":"operatorSend","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[{"name":"_tokenHolder","type":"address"}],"name":"balanceOf","type":"function"},{"outputs":[{"name":"success","type":"bool"}],"constant":false,"payable":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint128"}],"name":"transferFrom","type":"function"},{"outputs":[{"name":"success","type":"bool"}],"constant":false,"payable":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_amount","type":"uint128"}],"name":"approve","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"_operator","type":"address"}],"name":"authorizeOperator","type":"function"},{"outputs":[{"name":"","type":"string"}],"constant":true,"payable":false,"inputs":[],"name":"symbol","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"_tokenHolder","type":"address"},{"name":"_amount","type":"uint128"},{"name":"_holderData","type":"bytes"},{"name":"_operatorData","type":"bytes"}],"name":"operatorBurn","type":"function"},{"outputs":[{"name":"","type":"bool"}],"constant":true,"payable":false,"inputs":[{"name":"_operator","type":"address"},{"name":"_tokenHolder","type":"address"}],"name":"isOperatorFor","type":"function"},{"outputs":[{"name":"remaining","type":"uint128"}],"constant":true,"payable":false,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint128"},{"name":"_userData","type":"bytes"}],"name":"send","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"_amount","type":"uint128"},{"name":"_holderData","type":"bytes"}],"name":"burn","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"_operator","type":"address"}],"name":"revokeOperator","type":"function"},{"outputs":[{"name":"success","type":"bool"}],"constant":false,"payable":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint128"}],"name":"transfer","type":"function"},{"outputs":[],"payable":false,"inputs":[{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_granularity","type":"uint128"},{"name":"_totalSupply","type":"uint128"},{"name":"_specialAddress","type":"address"}],"name":"","type":"constructor"},{"outputs":[],"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint128"}],"name":"Transfer","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint128"}],"name":"Approval","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_totalSupply","type":"uint128"},{"indexed":true,"name":"_specialAddress","type":"address"}],"name":"Created","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_operator","type":"address"},{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_amount","type":"uint128"},{"indexed":false,"name":"_holderData","type":"bytes"},{"indexed":false,"name":"_operatorData","type":"bytes"}],"name":"Sent","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_operator","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_amount","type":"uint128"},{"indexed":false,"name":"_operatorData","type":"bytes"}],"name":"Minted","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_operator","type":"address"},{"indexed":true,"name":"_from","type":"address"},{"indexed":false,"name":"_amount","type":"uint128"},{"indexed":false,"name":"_holderData","type":"bytes"},{"indexed":false,"name":"_operatorData","type":"bytes"}],"name":"Burned","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_operator","type":"address"},{"indexed":true,"name":"_tokenHolder","type":"address"}],"name":"AuthorizedOperator","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_operator","type":"address"},{"indexed":true,"name":"_tokenHolder","type":"address"}],"name":"RevokedOperator","anonymous":false,"type":"event"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.15;\n\n/*====================SafeMath begins====================*/\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @notice This is a softer (in terms of throws) variant of SafeMath:\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1121\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n        c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        // Solidity automatically throws when dividing by 0\n        // therefore require beforehand avoid throw\n        require(_b > 0);\n        // uint128 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n}\n\n/*====================SafeMath ends====================*/\n\n\n/*====================ATS begins====================*/\ninterface ATS {\n\n    /// Returns the name of the token\n    function name() public constant returns (string);\n\n    /// Returns the symbol of the token\n    function symbol() public constant returns (string);\n\n    /// Returns the totalSupply of the token, assuming a fixed number of\n    /// token circulation, this number should not change.\n    function totalSupply() public constant returns (uint128);\n\n    /// Returns the currently liquid supply of the token, assuming a fixed\n    /// number of (total) tokens are available, this number should never\n    /// exceed the totalSupply() of the token.\n    function liquidSupply() public constant returns (uint128);\n\n    function balanceOf(address owner) public constant returns (uint128);\n\n    function granularity() public constant returns (uint128);\n\n    /// Default Operators removed, rationale behind this is that default operators\n    /// Rationale behind this is that all operators should be (opt-in), this includes\n    // function defaultOperators() public constant returns (address[]);\n\n    function isOperatorFor(address operator, address tokenHolder) public constant returns (bool);\n    function authorizeOperator(address operator) public;\n    function revokeOperator(address operator) public;\n\n    function send(address to, uint128 amount, bytes holderData) public;\n    function operatorSend(address from, address to, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Some functionality should still include a burn (for example slashing ERC20 tokens from a validator)\n    function burn(uint128 amount, bytes holderData) public;\n\n    function operatorBurn(address from, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Event to be emit at the time of contract creation. Rationale behind the event is a few things:\n    ///\n    /// * It allows one to filter for new ATS tokens being created, in the interest of clarity\n    ///   this is a big help. We can simply filter for this event.\n    ///\n    /// * It indicates the `totalSupply` of the network. `totalSupply` is very important in\n    ///   our standard, therefore it makes sense to include it as an emission.\n    event Created(\n        uint128 indexed     _totalSupply,\n        /// This is a horrible name I know, up for debate\n        address indexed     _specialAddress);\n\n    event Sent(\n        address indexed     _operator,\n        address indexed     _from,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event Minted(\n        address indexed     _operator,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _operatorData);\n\n    event Burned(\n        address indexed     _operator,\n        address indexed     _from,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event AuthorizedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n\n    event RevokedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n}\n/*====================ATS ends====================*/\n\n\n/*====================ERC20 begins====================*/\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n *\n * @notice ATS contracts by default are required to implement ERC20 interface\n */\ncontract ERC20 {\n    function totalSupply() public constant returns (uint128);\n\n    function balanceOf(address _who) public constant returns (uint128);\n\n    function allowance(address _owner, address _spender) public constant returns (uint128);\n\n    function transfer(address _to, uint128 _value) public returns (bool);\n\n    function approve(address _spender, uint128 _value) public returns (bool);\n\n    function transferFrom(address _from, address _to, uint128 _value) public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint128 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint128 value\n    );\n}\n/*====================ERC20 ends====================*/\n\n/*====================ContractInterfaceImplementer begins====================*/\ncontract ContractInterfaceRegistry {\n    //function getManager(address _addr) public constant returns(address);\n    function setManager(address _addr, address _newManager) external;\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external constant returns (address);\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\n}\n\ncontract ContractInterfaceImplementer {\n    // TODO: this needs to be deployed, this is just a placeholder address\n    ContractInterfaceRegistry contractInterfaceRegistry = ContractInterfaceRegistry(0xa016a864c95dfd71bde76ade27a4045cd8e1b6e82cb91090fdedec3822e80511);\n\n    function setInterfaceImplementation(string _interfaceLabel, address impl) internal {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        contractInterfaceRegistry.setInterfaceImplementer(this, interfaceHash, impl);\n    }\n\n    function interfaceAddr(address addr, string _interfaceLabel) internal constant returns(address) {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        return contractInterfaceRegistry.getInterfaceImplementer(addr, interfaceHash);\n    }\n\n    function delegateManagement(address _newManager) internal {\n        contractInterfaceRegistry.setManager(this, _newManager);\n    }\n}\n/*====================ContractInterfaceImplementer ends====================*/\n\n\n\n/*====================ATSTokenRecipient begins====================*/\ncontract ATSTokenRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenRecipient ends====================*/\n\n\n\n/*====================ATSTokenSender begins====================*/\ncontract ATSTokenSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenSender ends====================*/\n\n\n\n/*====================TokenBridgeRegistryUserInterface begins====================*/\n/// @title TokenBridgeRegistryUserInterface\n/// Represents an entity that implements functionality designed to\n/// interface with token bridges.\ninterface TokenBridgeRegistryUserInterface {\n    /// @notice Interface for a bridge/relay to execute a `send`\n    /// @dev this name was suggested by Michael Kitchen, who suggested\n    /// it makes sense to thaw an token from solid to liquid\n    ///\n    /// @dev function is called by foreign entity to `thaw` tokens\n    /// to a particular user.\n    function thaw(bytes32 _foreignNetworkId, address _recipient, uint128 _amount, bytes _foreignData) public;\n\n    /// @notice Returns the relay address for the given implementer\n    function registry() public constant returns (address);\n\n    /// @notice Interface for a user to execute a `freeze`, which essentially\n    /// is a functionality that locks the token (into the special address)\n    ///\n    /// @dev function is called by local user to `freeze` tokens thereby\n    /// transferring them to another network.\n    function freeze(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n\n    /// @notice function for a token contract to set the registry\n    function setRegistry(address _registry) public;\n\n    /// @notice thaw event, to be called by the implementer after\n    /// receiving the thaw\n    event Thaw(\n        bytes32 indexed _foreignNetworkId,\n        address indexed _recipient,\n        uint128 indexed _amount,\n        bytes           _foreignData\n    );\n\n    /// @notice emit to indicate a `freeze` has been called by\n    /// the local user.\n    event Freeze(\n        bytes32 indexed _foreignNetworkId,\n        bytes32 indexed _foreignRecipient,\n        uint128 indexed _amount,\n        bytes           _localData\n    );\n\n    /// @notice emit to indicate that a registry has been set\n    event RegistrySet(\n        address indexed _registry\n    );\n}\n\n/// @title TokenBridge\n/// Used by both the registry and `TokenBridgeRegisterUserInterface`,\n/// informs the registry contract that a transfer is occuring.\ninterface TokenBridgeRegistryInterface {\n    /// @notice function used by the registry to emit a transfer event\n    function transfer(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n}\n/*====================TokenBridgeRegistryUserInterface ends====================*/\n\n\n\ncontract Platypus is ATS, ERC20, ContractInterfaceImplementer {\n    using SafeMath for uint128;\n\n    /* -- Constants -- */\n\n    address constant internal addressTypeMask = 0xFF00000000000000000000000000000000000000000000000000000000000000;\n    address constant internal zeroAddress = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    /* -- ATS Contract State -- */\n\n    string internal mName;\n    string internal mSymbol;\n    uint128 internal mGranularity;\n    uint128 internal mTotalSupply;\n    address internal mSpecialAddress;\n\n    mapping(address => uint128) internal mBalances;\n    mapping(address => mapping(address => bool)) internal mAuthorized;\n\n    // for ERC20\n    mapping(address => mapping(address => uint128)) internal mAllowed;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token.\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    /// @param _totalSupply of the new token. This can only be set once\n    function Platypus(\n        string _name,\n        string _symbol,\n        uint128 _granularity,\n        uint128 _totalSupply,\n        address _specialAddress\n    ) {\n        require(_granularity >= 1);\n        mName = 'platapus';\n        mSymbol = 'pla';\n        mTotalSupply = 10000;\n        mGranularity = _granularity;\n        mSpecialAddress = _specialAddress;\n\n        // initialize special address account\n        initializeSpecialAddress();\n\n        // register onto CIR\n        setInterfaceImplementation(\"ATS\", this);\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public constant returns (string) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public constant returns (string) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public constant returns (uint128) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public constant returns (uint128) { return mTotalSupply; }\n\n    /// @return the special address of the token\n    function specialAddress() public constant returns (address) { return mSpecialAddress; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public constant returns (uint128) { return mBalances[_tokenHolder]; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint128 _amount, bytes _userData) public {\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = true;\n        AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = false;\n        RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public constant returns (bool) {\n        return (_operator == _tokenHolder || mAuthorized[_operator][_tokenHolder]);\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(address _from, address _to, uint128 _amount, bytes _userData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _from));\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\n    }\n\n    function burn(uint128 _amount, bytes _holderData) public {\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\n    }\n\n    function operatorBurn(address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _tokenHolder));\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n\n    /// @notice Helper function that initializes the `specialAddress`\n    /// checks that the specialAddress is indeed not in the user space\n    /// and is in a pre-destined reserved space only available for\n    /// `non-user` addresses.\n    ///\n    /// @dev we don't apply checks for `totalSupply` here because\n    /// the user could want to set a supply of `0` tokens.\n    function initializeSpecialAddress() internal {\n        /// check that the used address is not in user space\n        //I'm getting an error here, will check later\n        //require(mSpecialAddress & addressTypeMask == zeroAddress);\n        mBalances[mSpecialAddress] = mTotalSupply;\n        Created(mTotalSupply, mSpecialAddress);\n    }\n\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint128 _amount) internal constant {\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    ///\n    /// Ideally, we should propose a better system that extcodesize\n    /// TODO: CHANGE ME, going to require a resolution on best approach\n    /// Given that we won't be able to detect code size.\n    ///\n    /// @param _addr The address to be checked\n    /// @return `true` if the contract is a regular address, `false` otherwise\n    function isRegularAddress(address _addr) internal constant returns (bool) {\n        // if (_addr == 0) { return false; }\n        // uint size;\n        // assembly { size := extcodesize(_addr) }\n        // return size == 0;\n        return true;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `erc777_tokenHolder`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\n\n        require(_to != address(0));             // forbid sending to 0x0 (=burning)\n        require(_to != mSpecialAddress);         // forbid sending to special address (=locking)\n        require(mBalances[_from] >= _amount);   // ensure enough funds\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\n\n        Sent(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _holderData Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(address _operator, address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData)\n        internal\n    {\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount);\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\n        Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ATSTokenRecipient\");\n        if (recipientImplementation != 0) {\n            ATSTokenRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _userData, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to));\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ATSTokenSender\");\n        if (senderImplementation == 0) { return; }\n        ATSTokenSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    function liquidSupply() public constant returns (uint128) {\n        return mTotalSupply.sub(balanceOf(mSpecialAddress));\n    }\n\n    /* -- ERC20 Functionality -- */\n\n    function decimals() public constant returns (uint8) {\n        return uint8(18);\n    }\n\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint128 _amount) public returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint128 _amount) public returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender]);\n\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint128 _amount) public returns (bool success) {\n        mAllowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint128 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n}\n"}},"ATSTokenRecipient":{"code":"0x","info":{"abiDefinition":[{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"operator","type":"address"},{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"amount","type":"uint128"},{"name":"userData","type":"bytes"},{"name":"operatorData","type":"bytes"}],"name":"tokensReceived","type":"function"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.15;\n\n/*====================SafeMath begins====================*/\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @notice This is a softer (in terms of throws) variant of SafeMath:\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1121\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n        c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        // Solidity automatically throws when dividing by 0\n        // therefore require beforehand avoid throw\n        require(_b > 0);\n        // uint128 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n}\n\n/*====================SafeMath ends====================*/\n\n\n/*====================ATS begins====================*/\ninterface ATS {\n\n    /// Returns the name of the token\n    function name() public constant returns (string);\n\n    /// Returns the symbol of the token\n    function symbol() public constant returns (string);\n\n    /// Returns the totalSupply of the token, assuming a fixed number of\n    /// token circulation, this number should not change.\n    function totalSupply() public constant returns (uint128);\n\n    /// Returns the currently liquid supply of the token, assuming a fixed\n    /// number of (total) tokens are available, this number should never\n    /// exceed the totalSupply() of the token.\n    function liquidSupply() public constant returns (uint128);\n\n    function balanceOf(address owner) public constant returns (uint128);\n\n    function granularity() public constant returns (uint128);\n\n    /// Default Operators removed, rationale behind this is that default operators\n    /// Rationale behind this is that all operators should be (opt-in), this includes\n    // function defaultOperators() public constant returns (address[]);\n\n    function isOperatorFor(address operator, address tokenHolder) public constant returns (bool);\n    function authorizeOperator(address operator) public;\n    function revokeOperator(address operator) public;\n\n    function send(address to, uint128 amount, bytes holderData) public;\n    function operatorSend(address from, address to, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Some functionality should still include a burn (for example slashing ERC20 tokens from a validator)\n    function burn(uint128 amount, bytes holderData) public;\n\n    function operatorBurn(address from, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Event to be emit at the time of contract creation. Rationale behind the event is a few things:\n    ///\n    /// * It allows one to filter for new ATS tokens being created, in the interest of clarity\n    ///   this is a big help. We can simply filter for this event.\n    ///\n    /// * It indicates the `totalSupply` of the network. `totalSupply` is very important in\n    ///   our standard, therefore it makes sense to include it as an emission.\n    event Created(\n        uint128 indexed     _totalSupply,\n        /// This is a horrible name I know, up for debate\n        address indexed     _specialAddress);\n\n    event Sent(\n        address indexed     _operator,\n        address indexed     _from,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event Minted(\n        address indexed     _operator,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _operatorData);\n\n    event Burned(\n        address indexed     _operator,\n        address indexed     _from,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event AuthorizedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n\n    event RevokedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n}\n/*====================ATS ends====================*/\n\n\n/*====================ERC20 begins====================*/\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n *\n * @notice ATS contracts by default are required to implement ERC20 interface\n */\ncontract ERC20 {\n    function totalSupply() public constant returns (uint128);\n\n    function balanceOf(address _who) public constant returns (uint128);\n\n    function allowance(address _owner, address _spender) public constant returns (uint128);\n\n    function transfer(address _to, uint128 _value) public returns (bool);\n\n    function approve(address _spender, uint128 _value) public returns (bool);\n\n    function transferFrom(address _from, address _to, uint128 _value) public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint128 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint128 value\n    );\n}\n/*====================ERC20 ends====================*/\n\n/*====================ContractInterfaceImplementer begins====================*/\ncontract ContractInterfaceRegistry {\n    //function getManager(address _addr) public constant returns(address);\n    function setManager(address _addr, address _newManager) external;\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external constant returns (address);\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\n}\n\ncontract ContractInterfaceImplementer {\n    // TODO: this needs to be deployed, this is just a placeholder address\n    ContractInterfaceRegistry contractInterfaceRegistry = ContractInterfaceRegistry(0xa016a864c95dfd71bde76ade27a4045cd8e1b6e82cb91090fdedec3822e80511);\n\n    function setInterfaceImplementation(string _interfaceLabel, address impl) internal {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        contractInterfaceRegistry.setInterfaceImplementer(this, interfaceHash, impl);\n    }\n\n    function interfaceAddr(address addr, string _interfaceLabel) internal constant returns(address) {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        return contractInterfaceRegistry.getInterfaceImplementer(addr, interfaceHash);\n    }\n\n    function delegateManagement(address _newManager) internal {\n        contractInterfaceRegistry.setManager(this, _newManager);\n    }\n}\n/*====================ContractInterfaceImplementer ends====================*/\n\n\n\n/*====================ATSTokenRecipient begins====================*/\ncontract ATSTokenRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenRecipient ends====================*/\n\n\n\n/*====================ATSTokenSender begins====================*/\ncontract ATSTokenSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenSender ends====================*/\n\n\n\n/*====================TokenBridgeRegistryUserInterface begins====================*/\n/// @title TokenBridgeRegistryUserInterface\n/// Represents an entity that implements functionality designed to\n/// interface with token bridges.\ninterface TokenBridgeRegistryUserInterface {\n    /// @notice Interface for a bridge/relay to execute a `send`\n    /// @dev this name was suggested by Michael Kitchen, who suggested\n    /// it makes sense to thaw an token from solid to liquid\n    ///\n    /// @dev function is called by foreign entity to `thaw` tokens\n    /// to a particular user.\n    function thaw(bytes32 _foreignNetworkId, address _recipient, uint128 _amount, bytes _foreignData) public;\n\n    /// @notice Returns the relay address for the given implementer\n    function registry() public constant returns (address);\n\n    /// @notice Interface for a user to execute a `freeze`, which essentially\n    /// is a functionality that locks the token (into the special address)\n    ///\n    /// @dev function is called by local user to `freeze` tokens thereby\n    /// transferring them to another network.\n    function freeze(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n\n    /// @notice function for a token contract to set the registry\n    function setRegistry(address _registry) public;\n\n    /// @notice thaw event, to be called by the implementer after\n    /// receiving the thaw\n    event Thaw(\n        bytes32 indexed _foreignNetworkId,\n        address indexed _recipient,\n        uint128 indexed _amount,\n        bytes           _foreignData\n    );\n\n    /// @notice emit to indicate a `freeze` has been called by\n    /// the local user.\n    event Freeze(\n        bytes32 indexed _foreignNetworkId,\n        bytes32 indexed _foreignRecipient,\n        uint128 indexed _amount,\n        bytes           _localData\n    );\n\n    /// @notice emit to indicate that a registry has been set\n    event RegistrySet(\n        address indexed _registry\n    );\n}\n\n/// @title TokenBridge\n/// Used by both the registry and `TokenBridgeRegisterUserInterface`,\n/// informs the registry contract that a transfer is occuring.\ninterface TokenBridgeRegistryInterface {\n    /// @notice function used by the registry to emit a transfer event\n    function transfer(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n}\n/*====================TokenBridgeRegistryUserInterface ends====================*/\n\n\n\ncontract Platypus is ATS, ERC20, ContractInterfaceImplementer {\n    using SafeMath for uint128;\n\n    /* -- Constants -- */\n\n    address constant internal addressTypeMask = 0xFF00000000000000000000000000000000000000000000000000000000000000;\n    address constant internal zeroAddress = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    /* -- ATS Contract State -- */\n\n    string internal mName;\n    string internal mSymbol;\n    uint128 internal mGranularity;\n    uint128 internal mTotalSupply;\n    address internal mSpecialAddress;\n\n    mapping(address => uint128) internal mBalances;\n    mapping(address => mapping(address => bool)) internal mAuthorized;\n\n    // for ERC20\n    mapping(address => mapping(address => uint128)) internal mAllowed;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token.\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    /// @param _totalSupply of the new token. This can only be set once\n    function Platypus(\n        string _name,\n        string _symbol,\n        uint128 _granularity,\n        uint128 _totalSupply,\n        address _specialAddress\n    ) {\n        require(_granularity >= 1);\n        mName = 'platapus';\n        mSymbol = 'pla';\n        mTotalSupply = 10000;\n        mGranularity = _granularity;\n        mSpecialAddress = _specialAddress;\n\n        // initialize special address account\n        initializeSpecialAddress();\n\n        // register onto CIR\n        setInterfaceImplementation(\"ATS\", this);\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public constant returns (string) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public constant returns (string) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public constant returns (uint128) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public constant returns (uint128) { return mTotalSupply; }\n\n    /// @return the special address of the token\n    function specialAddress() public constant returns (address) { return mSpecialAddress; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public constant returns (uint128) { return mBalances[_tokenHolder]; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint128 _amount, bytes _userData) public {\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = true;\n        AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = false;\n        RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public constant returns (bool) {\n        return (_operator == _tokenHolder || mAuthorized[_operator][_tokenHolder]);\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(address _from, address _to, uint128 _amount, bytes _userData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _from));\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\n    }\n\n    function burn(uint128 _amount, bytes _holderData) public {\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\n    }\n\n    function operatorBurn(address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _tokenHolder));\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n\n    /// @notice Helper function that initializes the `specialAddress`\n    /// checks that the specialAddress is indeed not in the user space\n    /// and is in a pre-destined reserved space only available for\n    /// `non-user` addresses.\n    ///\n    /// @dev we don't apply checks for `totalSupply` here because\n    /// the user could want to set a supply of `0` tokens.\n    function initializeSpecialAddress() internal {\n        /// check that the used address is not in user space\n        //I'm getting an error here, will check later\n        //require(mSpecialAddress & addressTypeMask == zeroAddress);\n        mBalances[mSpecialAddress] = mTotalSupply;\n        Created(mTotalSupply, mSpecialAddress);\n    }\n\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint128 _amount) internal constant {\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    ///\n    /// Ideally, we should propose a better system that extcodesize\n    /// TODO: CHANGE ME, going to require a resolution on best approach\n    /// Given that we won't be able to detect code size.\n    ///\n    /// @param _addr The address to be checked\n    /// @return `true` if the contract is a regular address, `false` otherwise\n    function isRegularAddress(address _addr) internal constant returns (bool) {\n        // if (_addr == 0) { return false; }\n        // uint size;\n        // assembly { size := extcodesize(_addr) }\n        // return size == 0;\n        return true;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `erc777_tokenHolder`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\n\n        require(_to != address(0));             // forbid sending to 0x0 (=burning)\n        require(_to != mSpecialAddress);         // forbid sending to special address (=locking)\n        require(mBalances[_from] >= _amount);   // ensure enough funds\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\n\n        Sent(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _holderData Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(address _operator, address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData)\n        internal\n    {\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount);\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\n        Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ATSTokenRecipient\");\n        if (recipientImplementation != 0) {\n            ATSTokenRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _userData, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to));\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ATSTokenSender\");\n        if (senderImplementation == 0) { return; }\n        ATSTokenSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    function liquidSupply() public constant returns (uint128) {\n        return mTotalSupply.sub(balanceOf(mSpecialAddress));\n    }\n\n    /* -- ERC20 Functionality -- */\n\n    function decimals() public constant returns (uint8) {\n        return uint8(18);\n    }\n\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint128 _amount) public returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint128 _amount) public returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender]);\n\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint128 _amount) public returns (bool success) {\n        mAllowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint128 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n}\n"}},"SafeMath":{"code":"0x60506040523415600f5760006000fd5b6013565b603a8060206000396000f30060506040526008565b60006000fd00a165627a7a723058207af1cb7e0e1c59dcbb98e0900dcdbe61e1493134efeb8e7adf1b933170f89bb80029","info":{"abiDefinition":[],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.15;\n\n/*====================SafeMath begins====================*/\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @notice This is a softer (in terms of throws) variant of SafeMath:\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1121\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n        c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        // Solidity automatically throws when dividing by 0\n        // therefore require beforehand avoid throw\n        require(_b > 0);\n        // uint128 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n}\n\n/*====================SafeMath ends====================*/\n\n\n/*====================ATS begins====================*/\ninterface ATS {\n\n    /// Returns the name of the token\n    function name() public constant returns (string);\n\n    /// Returns the symbol of the token\n    function symbol() public constant returns (string);\n\n    /// Returns the totalSupply of the token, assuming a fixed number of\n    /// token circulation, this number should not change.\n    function totalSupply() public constant returns (uint128);\n\n    /// Returns the currently liquid supply of the token, assuming a fixed\n    /// number of (total) tokens are available, this number should never\n    /// exceed the totalSupply() of the token.\n    function liquidSupply() public constant returns (uint128);\n\n    function balanceOf(address owner) public constant returns (uint128);\n\n    function granularity() public constant returns (uint128);\n\n    /// Default Operators removed, rationale behind this is that default operators\n    /// Rationale behind this is that all operators should be (opt-in), this includes\n    // function defaultOperators() public constant returns (address[]);\n\n    function isOperatorFor(address operator, address tokenHolder) public constant returns (bool);\n    function authorizeOperator(address operator) public;\n    function revokeOperator(address operator) public;\n\n    function send(address to, uint128 amount, bytes holderData) public;\n    function operatorSend(address from, address to, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Some functionality should still include a burn (for example slashing ERC20 tokens from a validator)\n    function burn(uint128 amount, bytes holderData) public;\n\n    function operatorBurn(address from, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Event to be emit at the time of contract creation. Rationale behind the event is a few things:\n    ///\n    /// * It allows one to filter for new ATS tokens being created, in the interest of clarity\n    ///   this is a big help. We can simply filter for this event.\n    ///\n    /// * It indicates the `totalSupply` of the network. `totalSupply` is very important in\n    ///   our standard, therefore it makes sense to include it as an emission.\n    event Created(\n        uint128 indexed     _totalSupply,\n        /// This is a horrible name I know, up for debate\n        address indexed     _specialAddress);\n\n    event Sent(\n        address indexed     _operator,\n        address indexed     _from,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event Minted(\n        address indexed     _operator,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _operatorData);\n\n    event Burned(\n        address indexed     _operator,\n        address indexed     _from,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event AuthorizedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n\n    event RevokedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n}\n/*====================ATS ends====================*/\n\n\n/*====================ERC20 begins====================*/\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n *\n * @notice ATS contracts by default are required to implement ERC20 interface\n */\ncontract ERC20 {\n    function totalSupply() public constant returns (uint128);\n\n    function balanceOf(address _who) public constant returns (uint128);\n\n    function allowance(address _owner, address _spender) public constant returns (uint128);\n\n    function transfer(address _to, uint128 _value) public returns (bool);\n\n    function approve(address _spender, uint128 _value) public returns (bool);\n\n    function transferFrom(address _from, address _to, uint128 _value) public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint128 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint128 value\n    );\n}\n/*====================ERC20 ends====================*/\n\n/*====================ContractInterfaceImplementer begins====================*/\ncontract ContractInterfaceRegistry {\n    //function getManager(address _addr) public constant returns(address);\n    function setManager(address _addr, address _newManager) external;\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external constant returns (address);\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\n}\n\ncontract ContractInterfaceImplementer {\n    // TODO: this needs to be deployed, this is just a placeholder address\n    ContractInterfaceRegistry contractInterfaceRegistry = ContractInterfaceRegistry(0xa016a864c95dfd71bde76ade27a4045cd8e1b6e82cb91090fdedec3822e80511);\n\n    function setInterfaceImplementation(string _interfaceLabel, address impl) internal {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        contractInterfaceRegistry.setInterfaceImplementer(this, interfaceHash, impl);\n    }\n\n    function interfaceAddr(address addr, string _interfaceLabel) internal constant returns(address) {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        return contractInterfaceRegistry.getInterfaceImplementer(addr, interfaceHash);\n    }\n\n    function delegateManagement(address _newManager) internal {\n        contractInterfaceRegistry.setManager(this, _newManager);\n    }\n}\n/*====================ContractInterfaceImplementer ends====================*/\n\n\n\n/*====================ATSTokenRecipient begins====================*/\ncontract ATSTokenRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenRecipient ends====================*/\n\n\n\n/*====================ATSTokenSender begins====================*/\ncontract ATSTokenSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenSender ends====================*/\n\n\n\n/*====================TokenBridgeRegistryUserInterface begins====================*/\n/// @title TokenBridgeRegistryUserInterface\n/// Represents an entity that implements functionality designed to\n/// interface with token bridges.\ninterface TokenBridgeRegistryUserInterface {\n    /// @notice Interface for a bridge/relay to execute a `send`\n    /// @dev this name was suggested by Michael Kitchen, who suggested\n    /// it makes sense to thaw an token from solid to liquid\n    ///\n    /// @dev function is called by foreign entity to `thaw` tokens\n    /// to a particular user.\n    function thaw(bytes32 _foreignNetworkId, address _recipient, uint128 _amount, bytes _foreignData) public;\n\n    /// @notice Returns the relay address for the given implementer\n    function registry() public constant returns (address);\n\n    /// @notice Interface for a user to execute a `freeze`, which essentially\n    /// is a functionality that locks the token (into the special address)\n    ///\n    /// @dev function is called by local user to `freeze` tokens thereby\n    /// transferring them to another network.\n    function freeze(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n\n    /// @notice function for a token contract to set the registry\n    function setRegistry(address _registry) public;\n\n    /// @notice thaw event, to be called by the implementer after\n    /// receiving the thaw\n    event Thaw(\n        bytes32 indexed _foreignNetworkId,\n        address indexed _recipient,\n        uint128 indexed _amount,\n        bytes           _foreignData\n    );\n\n    /// @notice emit to indicate a `freeze` has been called by\n    /// the local user.\n    event Freeze(\n        bytes32 indexed _foreignNetworkId,\n        bytes32 indexed _foreignRecipient,\n        uint128 indexed _amount,\n        bytes           _localData\n    );\n\n    /// @notice emit to indicate that a registry has been set\n    event RegistrySet(\n        address indexed _registry\n    );\n}\n\n/// @title TokenBridge\n/// Used by both the registry and `TokenBridgeRegisterUserInterface`,\n/// informs the registry contract that a transfer is occuring.\ninterface TokenBridgeRegistryInterface {\n    /// @notice function used by the registry to emit a transfer event\n    function transfer(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n}\n/*====================TokenBridgeRegistryUserInterface ends====================*/\n\n\n\ncontract Platypus is ATS, ERC20, ContractInterfaceImplementer {\n    using SafeMath for uint128;\n\n    /* -- Constants -- */\n\n    address constant internal addressTypeMask = 0xFF00000000000000000000000000000000000000000000000000000000000000;\n    address constant internal zeroAddress = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    /* -- ATS Contract State -- */\n\n    string internal mName;\n    string internal mSymbol;\n    uint128 internal mGranularity;\n    uint128 internal mTotalSupply;\n    address internal mSpecialAddress;\n\n    mapping(address => uint128) internal mBalances;\n    mapping(address => mapping(address => bool)) internal mAuthorized;\n\n    // for ERC20\n    mapping(address => mapping(address => uint128)) internal mAllowed;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token.\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    /// @param _totalSupply of the new token. This can only be set once\n    function Platypus(\n        string _name,\n        string _symbol,\n        uint128 _granularity,\n        uint128 _totalSupply,\n        address _specialAddress\n    ) {\n        require(_granularity >= 1);\n        mName = 'platapus';\n        mSymbol = 'pla';\n        mTotalSupply = 10000;\n        mGranularity = _granularity;\n        mSpecialAddress = _specialAddress;\n\n        // initialize special address account\n        initializeSpecialAddress();\n\n        // register onto CIR\n        setInterfaceImplementation(\"ATS\", this);\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public constant returns (string) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public constant returns (string) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public constant returns (uint128) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public constant returns (uint128) { return mTotalSupply; }\n\n    /// @return the special address of the token\n    function specialAddress() public constant returns (address) { return mSpecialAddress; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public constant returns (uint128) { return mBalances[_tokenHolder]; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint128 _amount, bytes _userData) public {\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = true;\n        AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = false;\n        RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public constant returns (bool) {\n        return (_operator == _tokenHolder || mAuthorized[_operator][_tokenHolder]);\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(address _from, address _to, uint128 _amount, bytes _userData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _from));\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\n    }\n\n    function burn(uint128 _amount, bytes _holderData) public {\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\n    }\n\n    function operatorBurn(address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _tokenHolder));\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n\n    /// @notice Helper function that initializes the `specialAddress`\n    /// checks that the specialAddress is indeed not in the user space\n    /// and is in a pre-destined reserved space only available for\n    /// `non-user` addresses.\n    ///\n    /// @dev we don't apply checks for `totalSupply` here because\n    /// the user could want to set a supply of `0` tokens.\n    function initializeSpecialAddress() internal {\n        /// check that the used address is not in user space\n        //I'm getting an error here, will check later\n        //require(mSpecialAddress & addressTypeMask == zeroAddress);\n        mBalances[mSpecialAddress] = mTotalSupply;\n        Created(mTotalSupply, mSpecialAddress);\n    }\n\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint128 _amount) internal constant {\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    ///\n    /// Ideally, we should propose a better system that extcodesize\n    /// TODO: CHANGE ME, going to require a resolution on best approach\n    /// Given that we won't be able to detect code size.\n    ///\n    /// @param _addr The address to be checked\n    /// @return `true` if the contract is a regular address, `false` otherwise\n    function isRegularAddress(address _addr) internal constant returns (bool) {\n        // if (_addr == 0) { return false; }\n        // uint size;\n        // assembly { size := extcodesize(_addr) }\n        // return size == 0;\n        return true;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `erc777_tokenHolder`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\n\n        require(_to != address(0));             // forbid sending to 0x0 (=burning)\n        require(_to != mSpecialAddress);         // forbid sending to special address (=locking)\n        require(mBalances[_from] >= _amount);   // ensure enough funds\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\n\n        Sent(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _holderData Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(address _operator, address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData)\n        internal\n    {\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount);\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\n        Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ATSTokenRecipient\");\n        if (recipientImplementation != 0) {\n            ATSTokenRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _userData, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to));\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ATSTokenSender\");\n        if (senderImplementation == 0) { return; }\n        ATSTokenSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    function liquidSupply() public constant returns (uint128) {\n        return mTotalSupply.sub(balanceOf(mSpecialAddress));\n    }\n\n    /* -- ERC20 Functionality -- */\n\n    function decimals() public constant returns (uint8) {\n        return uint8(18);\n    }\n\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint128 _amount) public returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint128 _amount) public returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender]);\n\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint128 _amount) public returns (bool success) {\n        mAllowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint128 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n}\n"}},"ERC20":{"code":"0x","info":{"abiDefinition":[{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"totalSupply","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[{"name":"_who","type":"address"}],"name":"balanceOf","type":"function"},{"outputs":[{"name":"","type":"bool"}],"constant":false,"payable":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint128"}],"name":"transferFrom","type":"function"},{"outputs":[{"name":"","type":"bool"}],"constant":false,"payable":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint128"}],"name":"approve","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","type":"function"},{"outputs":[{"name":"","type":"bool"}],"constant":false,"payable":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint128"}],"name":"transfer","type":"function"},{"outputs":[],"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint128"}],"name":"Transfer","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint128"}],"name":"Approval","anonymous":false,"type":"event"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.15;\n\n/*====================SafeMath begins====================*/\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @notice This is a softer (in terms of throws) variant of SafeMath:\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1121\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n        c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        // Solidity automatically throws when dividing by 0\n        // therefore require beforehand avoid throw\n        require(_b > 0);\n        // uint128 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n}\n\n/*====================SafeMath ends====================*/\n\n\n/*====================ATS begins====================*/\ninterface ATS {\n\n    /// Returns the name of the token\n    function name() public constant returns (string);\n\n    /// Returns the symbol of the token\n    function symbol() public constant returns (string);\n\n    /// Returns the totalSupply of the token, assuming a fixed number of\n    /// token circulation, this number should not change.\n    function totalSupply() public constant returns (uint128);\n\n    /// Returns the currently liquid supply of the token, assuming a fixed\n    /// number of (total) tokens are available, this number should never\n    /// exceed the totalSupply() of the token.\n    function liquidSupply() public constant returns (uint128);\n\n    function balanceOf(address owner) public constant returns (uint128);\n\n    function granularity() public constant returns (uint128);\n\n    /// Default Operators removed, rationale behind this is that default operators\n    /// Rationale behind this is that all operators should be (opt-in), this includes\n    // function defaultOperators() public constant returns (address[]);\n\n    function isOperatorFor(address operator, address tokenHolder) public constant returns (bool);\n    function authorizeOperator(address operator) public;\n    function revokeOperator(address operator) public;\n\n    function send(address to, uint128 amount, bytes holderData) public;\n    function operatorSend(address from, address to, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Some functionality should still include a burn (for example slashing ERC20 tokens from a validator)\n    function burn(uint128 amount, bytes holderData) public;\n\n    function operatorBurn(address from, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Event to be emit at the time of contract creation. Rationale behind the event is a few things:\n    ///\n    /// * It allows one to filter for new ATS tokens being created, in the interest of clarity\n    ///   this is a big help. We can simply filter for this event.\n    ///\n    /// * It indicates the `totalSupply` of the network. `totalSupply` is very important in\n    ///   our standard, therefore it makes sense to include it as an emission.\n    event Created(\n        uint128 indexed     _totalSupply,\n        /// This is a horrible name I know, up for debate\n        address indexed     _specialAddress);\n\n    event Sent(\n        address indexed     _operator,\n        address indexed     _from,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event Minted(\n        address indexed     _operator,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _operatorData);\n\n    event Burned(\n        address indexed     _operator,\n        address indexed     _from,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event AuthorizedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n\n    event RevokedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n}\n/*====================ATS ends====================*/\n\n\n/*====================ERC20 begins====================*/\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n *\n * @notice ATS contracts by default are required to implement ERC20 interface\n */\ncontract ERC20 {\n    function totalSupply() public constant returns (uint128);\n\n    function balanceOf(address _who) public constant returns (uint128);\n\n    function allowance(address _owner, address _spender) public constant returns (uint128);\n\n    function transfer(address _to, uint128 _value) public returns (bool);\n\n    function approve(address _spender, uint128 _value) public returns (bool);\n\n    function transferFrom(address _from, address _to, uint128 _value) public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint128 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint128 value\n    );\n}\n/*====================ERC20 ends====================*/\n\n/*====================ContractInterfaceImplementer begins====================*/\ncontract ContractInterfaceRegistry {\n    //function getManager(address _addr) public constant returns(address);\n    function setManager(address _addr, address _newManager) external;\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external constant returns (address);\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\n}\n\ncontract ContractInterfaceImplementer {\n    // TODO: this needs to be deployed, this is just a placeholder address\n    ContractInterfaceRegistry contractInterfaceRegistry = ContractInterfaceRegistry(0xa016a864c95dfd71bde76ade27a4045cd8e1b6e82cb91090fdedec3822e80511);\n\n    function setInterfaceImplementation(string _interfaceLabel, address impl) internal {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        contractInterfaceRegistry.setInterfaceImplementer(this, interfaceHash, impl);\n    }\n\n    function interfaceAddr(address addr, string _interfaceLabel) internal constant returns(address) {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        return contractInterfaceRegistry.getInterfaceImplementer(addr, interfaceHash);\n    }\n\n    function delegateManagement(address _newManager) internal {\n        contractInterfaceRegistry.setManager(this, _newManager);\n    }\n}\n/*====================ContractInterfaceImplementer ends====================*/\n\n\n\n/*====================ATSTokenRecipient begins====================*/\ncontract ATSTokenRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenRecipient ends====================*/\n\n\n\n/*====================ATSTokenSender begins====================*/\ncontract ATSTokenSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenSender ends====================*/\n\n\n\n/*====================TokenBridgeRegistryUserInterface begins====================*/\n/// @title TokenBridgeRegistryUserInterface\n/// Represents an entity that implements functionality designed to\n/// interface with token bridges.\ninterface TokenBridgeRegistryUserInterface {\n    /// @notice Interface for a bridge/relay to execute a `send`\n    /// @dev this name was suggested by Michael Kitchen, who suggested\n    /// it makes sense to thaw an token from solid to liquid\n    ///\n    /// @dev function is called by foreign entity to `thaw` tokens\n    /// to a particular user.\n    function thaw(bytes32 _foreignNetworkId, address _recipient, uint128 _amount, bytes _foreignData) public;\n\n    /// @notice Returns the relay address for the given implementer\n    function registry() public constant returns (address);\n\n    /// @notice Interface for a user to execute a `freeze`, which essentially\n    /// is a functionality that locks the token (into the special address)\n    ///\n    /// @dev function is called by local user to `freeze` tokens thereby\n    /// transferring them to another network.\n    function freeze(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n\n    /// @notice function for a token contract to set the registry\n    function setRegistry(address _registry) public;\n\n    /// @notice thaw event, to be called by the implementer after\n    /// receiving the thaw\n    event Thaw(\n        bytes32 indexed _foreignNetworkId,\n        address indexed _recipient,\n        uint128 indexed _amount,\n        bytes           _foreignData\n    );\n\n    /// @notice emit to indicate a `freeze` has been called by\n    /// the local user.\n    event Freeze(\n        bytes32 indexed _foreignNetworkId,\n        bytes32 indexed _foreignRecipient,\n        uint128 indexed _amount,\n        bytes           _localData\n    );\n\n    /// @notice emit to indicate that a registry has been set\n    event RegistrySet(\n        address indexed _registry\n    );\n}\n\n/// @title TokenBridge\n/// Used by both the registry and `TokenBridgeRegisterUserInterface`,\n/// informs the registry contract that a transfer is occuring.\ninterface TokenBridgeRegistryInterface {\n    /// @notice function used by the registry to emit a transfer event\n    function transfer(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n}\n/*====================TokenBridgeRegistryUserInterface ends====================*/\n\n\n\ncontract Platypus is ATS, ERC20, ContractInterfaceImplementer {\n    using SafeMath for uint128;\n\n    /* -- Constants -- */\n\n    address constant internal addressTypeMask = 0xFF00000000000000000000000000000000000000000000000000000000000000;\n    address constant internal zeroAddress = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    /* -- ATS Contract State -- */\n\n    string internal mName;\n    string internal mSymbol;\n    uint128 internal mGranularity;\n    uint128 internal mTotalSupply;\n    address internal mSpecialAddress;\n\n    mapping(address => uint128) internal mBalances;\n    mapping(address => mapping(address => bool)) internal mAuthorized;\n\n    // for ERC20\n    mapping(address => mapping(address => uint128)) internal mAllowed;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token.\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    /// @param _totalSupply of the new token. This can only be set once\n    function Platypus(\n        string _name,\n        string _symbol,\n        uint128 _granularity,\n        uint128 _totalSupply,\n        address _specialAddress\n    ) {\n        require(_granularity >= 1);\n        mName = 'platapus';\n        mSymbol = 'pla';\n        mTotalSupply = 10000;\n        mGranularity = _granularity;\n        mSpecialAddress = _specialAddress;\n\n        // initialize special address account\n        initializeSpecialAddress();\n\n        // register onto CIR\n        setInterfaceImplementation(\"ATS\", this);\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public constant returns (string) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public constant returns (string) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public constant returns (uint128) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public constant returns (uint128) { return mTotalSupply; }\n\n    /// @return the special address of the token\n    function specialAddress() public constant returns (address) { return mSpecialAddress; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public constant returns (uint128) { return mBalances[_tokenHolder]; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint128 _amount, bytes _userData) public {\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = true;\n        AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = false;\n        RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public constant returns (bool) {\n        return (_operator == _tokenHolder || mAuthorized[_operator][_tokenHolder]);\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(address _from, address _to, uint128 _amount, bytes _userData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _from));\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\n    }\n\n    function burn(uint128 _amount, bytes _holderData) public {\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\n    }\n\n    function operatorBurn(address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _tokenHolder));\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n\n    /// @notice Helper function that initializes the `specialAddress`\n    /// checks that the specialAddress is indeed not in the user space\n    /// and is in a pre-destined reserved space only available for\n    /// `non-user` addresses.\n    ///\n    /// @dev we don't apply checks for `totalSupply` here because\n    /// the user could want to set a supply of `0` tokens.\n    function initializeSpecialAddress() internal {\n        /// check that the used address is not in user space\n        //I'm getting an error here, will check later\n        //require(mSpecialAddress & addressTypeMask == zeroAddress);\n        mBalances[mSpecialAddress] = mTotalSupply;\n        Created(mTotalSupply, mSpecialAddress);\n    }\n\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint128 _amount) internal constant {\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    ///\n    /// Ideally, we should propose a better system that extcodesize\n    /// TODO: CHANGE ME, going to require a resolution on best approach\n    /// Given that we won't be able to detect code size.\n    ///\n    /// @param _addr The address to be checked\n    /// @return `true` if the contract is a regular address, `false` otherwise\n    function isRegularAddress(address _addr) internal constant returns (bool) {\n        // if (_addr == 0) { return false; }\n        // uint size;\n        // assembly { size := extcodesize(_addr) }\n        // return size == 0;\n        return true;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `erc777_tokenHolder`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\n\n        require(_to != address(0));             // forbid sending to 0x0 (=burning)\n        require(_to != mSpecialAddress);         // forbid sending to special address (=locking)\n        require(mBalances[_from] >= _amount);   // ensure enough funds\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\n\n        Sent(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _holderData Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(address _operator, address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData)\n        internal\n    {\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount);\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\n        Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ATSTokenRecipient\");\n        if (recipientImplementation != 0) {\n            ATSTokenRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _userData, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to));\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ATSTokenSender\");\n        if (senderImplementation == 0) { return; }\n        ATSTokenSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    function liquidSupply() public constant returns (uint128) {\n        return mTotalSupply.sub(balanceOf(mSpecialAddress));\n    }\n\n    /* -- ERC20 Functionality -- */\n\n    function decimals() public constant returns (uint8) {\n        return uint8(18);\n    }\n\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint128 _amount) public returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint128 _amount) public returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender]);\n\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint128 _amount) public returns (bool success) {\n        mAllowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint128 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n}\n"}},"ContractInterfaceImplementer":{"code":"0x60506040527fa016a864c95dfd71bde76ade27a4045cd8e1b6e82cb91090fdedec3822e8051160006000509190825590600101553415603e5760006000fd5b6042565b603a80604f6000396000f30060506040526008565b60006000fd00a165627a7a72305820b5a793859fa7d9046e7451157de7c28dbd4ec7becd64be70ef5928d8101d5de60029","info":{"abiDefinition":[],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.15;\n\n/*====================SafeMath begins====================*/\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @notice This is a softer (in terms of throws) variant of SafeMath:\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1121\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n        c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        // Solidity automatically throws when dividing by 0\n        // therefore require beforehand avoid throw\n        require(_b > 0);\n        // uint128 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n}\n\n/*====================SafeMath ends====================*/\n\n\n/*====================ATS begins====================*/\ninterface ATS {\n\n    /// Returns the name of the token\n    function name() public constant returns (string);\n\n    /// Returns the symbol of the token\n    function symbol() public constant returns (string);\n\n    /// Returns the totalSupply of the token, assuming a fixed number of\n    /// token circulation, this number should not change.\n    function totalSupply() public constant returns (uint128);\n\n    /// Returns the currently liquid supply of the token, assuming a fixed\n    /// number of (total) tokens are available, this number should never\n    /// exceed the totalSupply() of the token.\n    function liquidSupply() public constant returns (uint128);\n\n    function balanceOf(address owner) public constant returns (uint128);\n\n    function granularity() public constant returns (uint128);\n\n    /// Default Operators removed, rationale behind this is that default operators\n    /// Rationale behind this is that all operators should be (opt-in), this includes\n    // function defaultOperators() public constant returns (address[]);\n\n    function isOperatorFor(address operator, address tokenHolder) public constant returns (bool);\n    function authorizeOperator(address operator) public;\n    function revokeOperator(address operator) public;\n\n    function send(address to, uint128 amount, bytes holderData) public;\n    function operatorSend(address from, address to, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Some functionality should still include a burn (for example slashing ERC20 tokens from a validator)\n    function burn(uint128 amount, bytes holderData) public;\n\n    function operatorBurn(address from, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Event to be emit at the time of contract creation. Rationale behind the event is a few things:\n    ///\n    /// * It allows one to filter for new ATS tokens being created, in the interest of clarity\n    ///   this is a big help. We can simply filter for this event.\n    ///\n    /// * It indicates the `totalSupply` of the network. `totalSupply` is very important in\n    ///   our standard, therefore it makes sense to include it as an emission.\n    event Created(\n        uint128 indexed     _totalSupply,\n        /// This is a horrible name I know, up for debate\n        address indexed     _specialAddress);\n\n    event Sent(\n        address indexed     _operator,\n        address indexed     _from,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event Minted(\n        address indexed     _operator,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _operatorData);\n\n    event Burned(\n        address indexed     _operator,\n        address indexed     _from,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event AuthorizedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n\n    event RevokedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n}\n/*====================ATS ends====================*/\n\n\n/*====================ERC20 begins====================*/\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n *\n * @notice ATS contracts by default are required to implement ERC20 interface\n */\ncontract ERC20 {\n    function totalSupply() public constant returns (uint128);\n\n    function balanceOf(address _who) public constant returns (uint128);\n\n    function allowance(address _owner, address _spender) public constant returns (uint128);\n\n    function transfer(address _to, uint128 _value) public returns (bool);\n\n    function approve(address _spender, uint128 _value) public returns (bool);\n\n    function transferFrom(address _from, address _to, uint128 _value) public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint128 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint128 value\n    );\n}\n/*====================ERC20 ends====================*/\n\n/*====================ContractInterfaceImplementer begins====================*/\ncontract ContractInterfaceRegistry {\n    //function getManager(address _addr) public constant returns(address);\n    function setManager(address _addr, address _newManager) external;\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external constant returns (address);\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\n}\n\ncontract ContractInterfaceImplementer {\n    // TODO: this needs to be deployed, this is just a placeholder address\n    ContractInterfaceRegistry contractInterfaceRegistry = ContractInterfaceRegistry(0xa016a864c95dfd71bde76ade27a4045cd8e1b6e82cb91090fdedec3822e80511);\n\n    function setInterfaceImplementation(string _interfaceLabel, address impl) internal {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        contractInterfaceRegistry.setInterfaceImplementer(this, interfaceHash, impl);\n    }\n\n    function interfaceAddr(address addr, string _interfaceLabel) internal constant returns(address) {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        return contractInterfaceRegistry.getInterfaceImplementer(addr, interfaceHash);\n    }\n\n    function delegateManagement(address _newManager) internal {\n        contractInterfaceRegistry.setManager(this, _newManager);\n    }\n}\n/*====================ContractInterfaceImplementer ends====================*/\n\n\n\n/*====================ATSTokenRecipient begins====================*/\ncontract ATSTokenRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenRecipient ends====================*/\n\n\n\n/*====================ATSTokenSender begins====================*/\ncontract ATSTokenSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenSender ends====================*/\n\n\n\n/*====================TokenBridgeRegistryUserInterface begins====================*/\n/// @title TokenBridgeRegistryUserInterface\n/// Represents an entity that implements functionality designed to\n/// interface with token bridges.\ninterface TokenBridgeRegistryUserInterface {\n    /// @notice Interface for a bridge/relay to execute a `send`\n    /// @dev this name was suggested by Michael Kitchen, who suggested\n    /// it makes sense to thaw an token from solid to liquid\n    ///\n    /// @dev function is called by foreign entity to `thaw` tokens\n    /// to a particular user.\n    function thaw(bytes32 _foreignNetworkId, address _recipient, uint128 _amount, bytes _foreignData) public;\n\n    /// @notice Returns the relay address for the given implementer\n    function registry() public constant returns (address);\n\n    /// @notice Interface for a user to execute a `freeze`, which essentially\n    /// is a functionality that locks the token (into the special address)\n    ///\n    /// @dev function is called by local user to `freeze` tokens thereby\n    /// transferring them to another network.\n    function freeze(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n\n    /// @notice function for a token contract to set the registry\n    function setRegistry(address _registry) public;\n\n    /// @notice thaw event, to be called by the implementer after\n    /// receiving the thaw\n    event Thaw(\n        bytes32 indexed _foreignNetworkId,\n        address indexed _recipient,\n        uint128 indexed _amount,\n        bytes           _foreignData\n    );\n\n    /// @notice emit to indicate a `freeze` has been called by\n    /// the local user.\n    event Freeze(\n        bytes32 indexed _foreignNetworkId,\n        bytes32 indexed _foreignRecipient,\n        uint128 indexed _amount,\n        bytes           _localData\n    );\n\n    /// @notice emit to indicate that a registry has been set\n    event RegistrySet(\n        address indexed _registry\n    );\n}\n\n/// @title TokenBridge\n/// Used by both the registry and `TokenBridgeRegisterUserInterface`,\n/// informs the registry contract that a transfer is occuring.\ninterface TokenBridgeRegistryInterface {\n    /// @notice function used by the registry to emit a transfer event\n    function transfer(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n}\n/*====================TokenBridgeRegistryUserInterface ends====================*/\n\n\n\ncontract Platypus is ATS, ERC20, ContractInterfaceImplementer {\n    using SafeMath for uint128;\n\n    /* -- Constants -- */\n\n    address constant internal addressTypeMask = 0xFF00000000000000000000000000000000000000000000000000000000000000;\n    address constant internal zeroAddress = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    /* -- ATS Contract State -- */\n\n    string internal mName;\n    string internal mSymbol;\n    uint128 internal mGranularity;\n    uint128 internal mTotalSupply;\n    address internal mSpecialAddress;\n\n    mapping(address => uint128) internal mBalances;\n    mapping(address => mapping(address => bool)) internal mAuthorized;\n\n    // for ERC20\n    mapping(address => mapping(address => uint128)) internal mAllowed;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token.\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    /// @param _totalSupply of the new token. This can only be set once\n    function Platypus(\n        string _name,\n        string _symbol,\n        uint128 _granularity,\n        uint128 _totalSupply,\n        address _specialAddress\n    ) {\n        require(_granularity >= 1);\n        mName = 'platapus';\n        mSymbol = 'pla';\n        mTotalSupply = 10000;\n        mGranularity = _granularity;\n        mSpecialAddress = _specialAddress;\n\n        // initialize special address account\n        initializeSpecialAddress();\n\n        // register onto CIR\n        setInterfaceImplementation(\"ATS\", this);\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public constant returns (string) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public constant returns (string) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public constant returns (uint128) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public constant returns (uint128) { return mTotalSupply; }\n\n    /// @return the special address of the token\n    function specialAddress() public constant returns (address) { return mSpecialAddress; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public constant returns (uint128) { return mBalances[_tokenHolder]; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint128 _amount, bytes _userData) public {\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = true;\n        AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = false;\n        RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public constant returns (bool) {\n        return (_operator == _tokenHolder || mAuthorized[_operator][_tokenHolder]);\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(address _from, address _to, uint128 _amount, bytes _userData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _from));\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\n    }\n\n    function burn(uint128 _amount, bytes _holderData) public {\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\n    }\n\n    function operatorBurn(address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _tokenHolder));\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n\n    /// @notice Helper function that initializes the `specialAddress`\n    /// checks that the specialAddress is indeed not in the user space\n    /// and is in a pre-destined reserved space only available for\n    /// `non-user` addresses.\n    ///\n    /// @dev we don't apply checks for `totalSupply` here because\n    /// the user could want to set a supply of `0` tokens.\n    function initializeSpecialAddress() internal {\n        /// check that the used address is not in user space\n        //I'm getting an error here, will check later\n        //require(mSpecialAddress & addressTypeMask == zeroAddress);\n        mBalances[mSpecialAddress] = mTotalSupply;\n        Created(mTotalSupply, mSpecialAddress);\n    }\n\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint128 _amount) internal constant {\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    ///\n    /// Ideally, we should propose a better system that extcodesize\n    /// TODO: CHANGE ME, going to require a resolution on best approach\n    /// Given that we won't be able to detect code size.\n    ///\n    /// @param _addr The address to be checked\n    /// @return `true` if the contract is a regular address, `false` otherwise\n    function isRegularAddress(address _addr) internal constant returns (bool) {\n        // if (_addr == 0) { return false; }\n        // uint size;\n        // assembly { size := extcodesize(_addr) }\n        // return size == 0;\n        return true;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `erc777_tokenHolder`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\n\n        require(_to != address(0));             // forbid sending to 0x0 (=burning)\n        require(_to != mSpecialAddress);         // forbid sending to special address (=locking)\n        require(mBalances[_from] >= _amount);   // ensure enough funds\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\n\n        Sent(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _holderData Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(address _operator, address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData)\n        internal\n    {\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount);\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\n        Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ATSTokenRecipient\");\n        if (recipientImplementation != 0) {\n            ATSTokenRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _userData, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to));\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ATSTokenSender\");\n        if (senderImplementation == 0) { return; }\n        ATSTokenSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    function liquidSupply() public constant returns (uint128) {\n        return mTotalSupply.sub(balanceOf(mSpecialAddress));\n    }\n\n    /* -- ERC20 Functionality -- */\n\n    function decimals() public constant returns (uint8) {\n        return uint8(18);\n    }\n\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint128 _amount) public returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint128 _amount) public returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender]);\n\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint128 _amount) public returns (bool success) {\n        mAllowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint128 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n}\n"}},"TokenBridgeRegistryUserInterface":{"code":"0x","info":{"abiDefinition":[{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"_foreignNetworkId","type":"bytes32"},{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint128"},{"name":"_foreignData","type":"bytes"}],"name":"thaw","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[],"name":"registry","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"_registry","type":"address"}],"name":"setRegistry","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"_foreignNetworkId","type":"bytes32"},{"name":"_foreignRecipient","type":"bytes32"},{"name":"_amount","type":"uint128"},{"name":"_localData","type":"bytes"}],"name":"freeze","type":"function"},{"outputs":[],"inputs":[{"indexed":true,"name":"_foreignNetworkId","type":"bytes32"},{"indexed":true,"name":"_recipient","type":"address"},{"indexed":true,"name":"_amount","type":"uint128"},{"indexed":false,"name":"_foreignData","type":"bytes"}],"name":"Thaw","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_foreignNetworkId","type":"bytes32"},{"indexed":true,"name":"_foreignRecipient","type":"bytes32"},{"indexed":true,"name":"_amount","type":"uint128"},{"indexed":false,"name":"_localData","type":"bytes"}],"name":"Freeze","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":true,"name":"_registry","type":"address"}],"name":"RegistrySet","anonymous":false,"type":"event"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.15;\n\n/*====================SafeMath begins====================*/\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @notice This is a softer (in terms of throws) variant of SafeMath:\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1121\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n        c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        // Solidity automatically throws when dividing by 0\n        // therefore require beforehand avoid throw\n        require(_b > 0);\n        // uint128 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint128 _a, uint128 _b) internal constant returns (uint128) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint128 _a, uint128 _b) internal constant returns (uint128 c) {\n        c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n}\n\n/*====================SafeMath ends====================*/\n\n\n/*====================ATS begins====================*/\ninterface ATS {\n\n    /// Returns the name of the token\n    function name() public constant returns (string);\n\n    /// Returns the symbol of the token\n    function symbol() public constant returns (string);\n\n    /// Returns the totalSupply of the token, assuming a fixed number of\n    /// token circulation, this number should not change.\n    function totalSupply() public constant returns (uint128);\n\n    /// Returns the currently liquid supply of the token, assuming a fixed\n    /// number of (total) tokens are available, this number should never\n    /// exceed the totalSupply() of the token.\n    function liquidSupply() public constant returns (uint128);\n\n    function balanceOf(address owner) public constant returns (uint128);\n\n    function granularity() public constant returns (uint128);\n\n    /// Default Operators removed, rationale behind this is that default operators\n    /// Rationale behind this is that all operators should be (opt-in), this includes\n    // function defaultOperators() public constant returns (address[]);\n\n    function isOperatorFor(address operator, address tokenHolder) public constant returns (bool);\n    function authorizeOperator(address operator) public;\n    function revokeOperator(address operator) public;\n\n    function send(address to, uint128 amount, bytes holderData) public;\n    function operatorSend(address from, address to, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Some functionality should still include a burn (for example slashing ERC20 tokens from a validator)\n    function burn(uint128 amount, bytes holderData) public;\n\n    function operatorBurn(address from, uint128 amount, bytes holderData, bytes operatorData) public;\n\n    /// Event to be emit at the time of contract creation. Rationale behind the event is a few things:\n    ///\n    /// * It allows one to filter for new ATS tokens being created, in the interest of clarity\n    ///   this is a big help. We can simply filter for this event.\n    ///\n    /// * It indicates the `totalSupply` of the network. `totalSupply` is very important in\n    ///   our standard, therefore it makes sense to include it as an emission.\n    event Created(\n        uint128 indexed     _totalSupply,\n        /// This is a horrible name I know, up for debate\n        address indexed     _specialAddress);\n\n    event Sent(\n        address indexed     _operator,\n        address indexed     _from,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event Minted(\n        address indexed     _operator,\n        address indexed     _to,\n        uint128             _amount,\n        bytes               _operatorData);\n\n    event Burned(\n        address indexed     _operator,\n        address indexed     _from,\n        uint128             _amount,\n        bytes               _holderData,\n        bytes               _operatorData);\n\n    event AuthorizedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n\n    event RevokedOperator(\n        address indexed     _operator,\n        address indexed     _tokenHolder);\n\n}\n/*====================ATS ends====================*/\n\n\n/*====================ERC20 begins====================*/\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n *\n * @notice ATS contracts by default are required to implement ERC20 interface\n */\ncontract ERC20 {\n    function totalSupply() public constant returns (uint128);\n\n    function balanceOf(address _who) public constant returns (uint128);\n\n    function allowance(address _owner, address _spender) public constant returns (uint128);\n\n    function transfer(address _to, uint128 _value) public returns (bool);\n\n    function approve(address _spender, uint128 _value) public returns (bool);\n\n    function transferFrom(address _from, address _to, uint128 _value) public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint128 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint128 value\n    );\n}\n/*====================ERC20 ends====================*/\n\n/*====================ContractInterfaceImplementer begins====================*/\ncontract ContractInterfaceRegistry {\n    //function getManager(address _addr) public constant returns(address);\n    function setManager(address _addr, address _newManager) external;\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external constant returns (address);\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\n}\n\ncontract ContractInterfaceImplementer {\n    // TODO: this needs to be deployed, this is just a placeholder address\n    ContractInterfaceRegistry contractInterfaceRegistry = ContractInterfaceRegistry(0xa016a864c95dfd71bde76ade27a4045cd8e1b6e82cb91090fdedec3822e80511);\n\n    function setInterfaceImplementation(string _interfaceLabel, address impl) internal {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        contractInterfaceRegistry.setInterfaceImplementer(this, interfaceHash, impl);\n    }\n\n    function interfaceAddr(address addr, string _interfaceLabel) internal constant returns(address) {\n        bytes32 interfaceHash = sha3(_interfaceLabel);\n        return contractInterfaceRegistry.getInterfaceImplementer(addr, interfaceHash);\n    }\n\n    function delegateManagement(address _newManager) internal {\n        contractInterfaceRegistry.setManager(this, _newManager);\n    }\n}\n/*====================ContractInterfaceImplementer ends====================*/\n\n\n\n/*====================ATSTokenRecipient begins====================*/\ncontract ATSTokenRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenRecipient ends====================*/\n\n\n\n/*====================ATSTokenSender begins====================*/\ncontract ATSTokenSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint128 amount,\n        bytes userData,\n        bytes operatorData\n    ) public;\n}\n/*====================ATSTokenSender ends====================*/\n\n\n\n/*====================TokenBridgeRegistryUserInterface begins====================*/\n/// @title TokenBridgeRegistryUserInterface\n/// Represents an entity that implements functionality designed to\n/// interface with token bridges.\ninterface TokenBridgeRegistryUserInterface {\n    /// @notice Interface for a bridge/relay to execute a `send`\n    /// @dev this name was suggested by Michael Kitchen, who suggested\n    /// it makes sense to thaw an token from solid to liquid\n    ///\n    /// @dev function is called by foreign entity to `thaw` tokens\n    /// to a particular user.\n    function thaw(bytes32 _foreignNetworkId, address _recipient, uint128 _amount, bytes _foreignData) public;\n\n    /// @notice Returns the relay address for the given implementer\n    function registry() public constant returns (address);\n\n    /// @notice Interface for a user to execute a `freeze`, which essentially\n    /// is a functionality that locks the token (into the special address)\n    ///\n    /// @dev function is called by local user to `freeze` tokens thereby\n    /// transferring them to another network.\n    function freeze(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n\n    /// @notice function for a token contract to set the registry\n    function setRegistry(address _registry) public;\n\n    /// @notice thaw event, to be called by the implementer after\n    /// receiving the thaw\n    event Thaw(\n        bytes32 indexed _foreignNetworkId,\n        address indexed _recipient,\n        uint128 indexed _amount,\n        bytes           _foreignData\n    );\n\n    /// @notice emit to indicate a `freeze` has been called by\n    /// the local user.\n    event Freeze(\n        bytes32 indexed _foreignNetworkId,\n        bytes32 indexed _foreignRecipient,\n        uint128 indexed _amount,\n        bytes           _localData\n    );\n\n    /// @notice emit to indicate that a registry has been set\n    event RegistrySet(\n        address indexed _registry\n    );\n}\n\n/// @title TokenBridge\n/// Used by both the registry and `TokenBridgeRegisterUserInterface`,\n/// informs the registry contract that a transfer is occuring.\ninterface TokenBridgeRegistryInterface {\n    /// @notice function used by the registry to emit a transfer event\n    function transfer(bytes32 _foreignNetworkId, bytes32 _foreignRecipient, uint128 _amount, bytes _localData) public;\n}\n/*====================TokenBridgeRegistryUserInterface ends====================*/\n\n\n\ncontract Platypus is ATS, ERC20, ContractInterfaceImplementer {\n    using SafeMath for uint128;\n\n    /* -- Constants -- */\n\n    address constant internal addressTypeMask = 0xFF00000000000000000000000000000000000000000000000000000000000000;\n    address constant internal zeroAddress = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    /* -- ATS Contract State -- */\n\n    string internal mName;\n    string internal mSymbol;\n    uint128 internal mGranularity;\n    uint128 internal mTotalSupply;\n    address internal mSpecialAddress;\n\n    mapping(address => uint128) internal mBalances;\n    mapping(address => mapping(address => bool)) internal mAuthorized;\n\n    // for ERC20\n    mapping(address => mapping(address => uint128)) internal mAllowed;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token.\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    /// @param _totalSupply of the new token. This can only be set once\n    function Platypus(\n        string _name,\n        string _symbol,\n        uint128 _granularity,\n        uint128 _totalSupply,\n        address _specialAddress\n    ) {\n        require(_granularity >= 1);\n        mName = 'platapus';\n        mSymbol = 'pla';\n        mTotalSupply = 10000;\n        mGranularity = _granularity;\n        mSpecialAddress = _specialAddress;\n\n        // initialize special address account\n        initializeSpecialAddress();\n\n        // register onto CIR\n        setInterfaceImplementation(\"ATS\", this);\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public constant returns (string) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public constant returns (string) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public constant returns (uint128) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public constant returns (uint128) { return mTotalSupply; }\n\n    /// @return the special address of the token\n    function specialAddress() public constant returns (address) { return mSpecialAddress; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public constant returns (uint128) { return mBalances[_tokenHolder]; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint128 _amount, bytes _userData) public {\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = true;\n        AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) public {\n        require(_operator != msg.sender);\n        mAuthorized[_operator][msg.sender] = false;\n        RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public constant returns (bool) {\n        return (_operator == _tokenHolder || mAuthorized[_operator][_tokenHolder]);\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(address _from, address _to, uint128 _amount, bytes _userData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _from));\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\n    }\n\n    function burn(uint128 _amount, bytes _holderData) public {\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\n    }\n\n    function operatorBurn(address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData) public {\n        require(isOperatorFor(msg.sender, _tokenHolder));\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n\n    /// @notice Helper function that initializes the `specialAddress`\n    /// checks that the specialAddress is indeed not in the user space\n    /// and is in a pre-destined reserved space only available for\n    /// `non-user` addresses.\n    ///\n    /// @dev we don't apply checks for `totalSupply` here because\n    /// the user could want to set a supply of `0` tokens.\n    function initializeSpecialAddress() internal {\n        /// check that the used address is not in user space\n        //I'm getting an error here, will check later\n        //require(mSpecialAddress & addressTypeMask == zeroAddress);\n        mBalances[mSpecialAddress] = mTotalSupply;\n        Created(mTotalSupply, mSpecialAddress);\n    }\n\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint128 _amount) internal constant {\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    ///\n    /// Ideally, we should propose a better system that extcodesize\n    /// TODO: CHANGE ME, going to require a resolution on best approach\n    /// Given that we won't be able to detect code size.\n    ///\n    /// @param _addr The address to be checked\n    /// @return `true` if the contract is a regular address, `false` otherwise\n    function isRegularAddress(address _addr) internal constant returns (bool) {\n        // if (_addr == 0) { return false; }\n        // uint size;\n        // assembly { size := extcodesize(_addr) }\n        // return size == 0;\n        return true;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `erc777_tokenHolder`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\n\n        require(_to != address(0));             // forbid sending to 0x0 (=burning)\n        require(_to != mSpecialAddress);         // forbid sending to special address (=locking)\n        require(mBalances[_from] >= _amount);   // ensure enough funds\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\n\n        Sent(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _holderData Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(address _operator, address _tokenHolder, uint128 _amount, bytes _holderData, bytes _operatorData)\n        internal\n    {\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount);\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\n        Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ATSTokenRecipient\");\n        if (recipientImplementation != 0) {\n            ATSTokenRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _userData, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to));\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _userData Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint128 _amount,\n        bytes _userData,\n        bytes _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ATSTokenSender\");\n        if (senderImplementation == 0) { return; }\n        ATSTokenSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\n    }\n\n    function liquidSupply() public constant returns (uint128) {\n        return mTotalSupply.sub(balanceOf(mSpecialAddress));\n    }\n\n    /* -- ERC20 Functionality -- */\n\n    function decimals() public constant returns (uint8) {\n        return uint8(18);\n    }\n\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint128 _amount) public returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint128 _amount) public returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender]);\n\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint128 _amount) public returns (bool success) {\n        mAllowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint128 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n}\n"}}},null]